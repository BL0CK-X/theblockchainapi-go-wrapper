openapi: 3.0.0
info:
  contact:
    email: info@blockchainapi.com
  description: "# About\n\nOur vision is to make it super easy to interact with the\
    \ decentralized web. We want you to be able to do this in any coding language\
    \ and do it easily and quickly. \n\nYou're a key part of our vision. We love feature\
    \ requests! <a href=\"#section/Feature-Requests\">Make one!</a>\n\n# How to Use\
    \ the API\n\nTo use the API, you simply need to create an API key pair.\n\nDoing\
    \ so takes less than a minute. Simply go to <a target=\"_blank\" href=\"https://dashboard.blockchainapi.com\"\
    >the dashboard</a>, create an account, and generate a key pair. You can now use\
    \ this pair to make API requests. You must create your first pair via the dashboard.\n\
    \n# Feature Requests\n\nGot a feature request? Submit it as an issue on <a target=\"\
    _blank\" href=\"https://github.com/BL0CK-X/the-blockchain-api/issues/new/choose\"\
    >our GitHub repo</a> or [email us](mailto:info@blockchainapi.com).\n\n# Contact\n\
    \n<figure>\n    <img \n        width=\"40px\"\n        height=\"40px\" \n    \
    \    src=\"https://theblockchainapi-docs.s3.amazonaws.com/icons/phone.svg\"\n\
    \    />\n    <figcaption style=\"textAlign:center;\">Text / Call: +1 (415) 888\
    \ 4745 </figcaption>\n</figure> <a href=\"mailto:info@blockchainapi.com\" target=\"\
    _blank\">\n    <figure>\n        <img \n            width=\"40px\"\n         \
    \   height=\"40px\" \n            src=\"https://theblockchainapi-docs.s3.amazonaws.com/icons/email.svg\"\
    \n        />\n        <figcaption style=\"textAlign:center;\">Email us: info@blockchainapi.com</figcaption>\n\
    \    </figure>\n</a> <a href=\"https://discord.gg/d49yzrZRAF\" target=\"_blank\"\
    >\n    <figure>\n        <img \n            width=\"40px\"\n            height=\"\
    40px\" \n            src=\"https://theblockchainapi-docs.s3.amazonaws.com/icons/discord.svg\"\
    \n        />\n        <figcaption style=\"textAlign:center;\">Join our Discord</figcaption>\n\
    \    </figure>\n</a> <a href=\"https://twitter.com/BlockchainAP1\" target=\"_blank\"\
    >\n    <figure>\n        <img \n            width=\"40px\"\n            height=\"\
    40px\" \n            src=\"https://theblockchainapi-docs.s3.amazonaws.com/icons/twitter.svg\"\
    \n        />\n         <figcaption style=\"textAlign:center;\">Follow us on Twitter</figcaption>\n\
    \    </figure>\n</a> <a href=\"https://github.com/BL0CK-X/the-blockchain-api\"\
    \ target=\"_blank\">\n    <figure>\n        <img \n            width=\"40px\"\n\
    \            height=\"40px\" \n            src=\"https://theblockchainapi-docs.s3.amazonaws.com/icons/github.svg\"\
    \n        />\n        <figcaption style=\"textAlign:center;\">Star us on Github</figcaption>\n\
    \    </figure>\n</a>\n\n# Security\n\nCommon dogma is to never give out your seed\
    \ phrase. We agree. It's a matter of security, and anyone who has your seed phrase\
    \ can irreversibly empty your wallet. \n\n<b>When using an API endpoint that requires\
    \ a seed phrase, we highly recommend that users use or create a wallet that they\
    \ do not use as their primary wallet.</b> \n\nHow you make this work depends on\
    \ what you're doing. If you're minting an NFT for example, we recommend creating\
    \ a new wallet and then transferring just enough SOL to that wallet to mint the\
    \ NFT. This is possible on Solana because such transactions cost less than a penny.\
    \ We will have more tutorials in the future that make it easier for you to be\
    \ secure when using our API.\n\nWe have easy-to-use endpoints for <a href=\"#tag/Solana-Wallet/paths/~1solana~1wallet~1secret_recovery_phrase/post\"\
    >creating a new seed phrase</a> and then <a href=\"#tag/Solana-Wallet/paths/~1solana~1wallet~1public_key/post\"\
    >deriving a public key</a> to enable you to transfer to that new wallet.\n\nLet's\
    \ have a constructive dialog about this. Feel free to <a href=\"#section/Contact\"\
    >contact us</a>. I made a video discussing this matter <a target=\"_blank\" href=\"\
    https://youtu.be/m9unUb8Z9qU\">here</a>.\n\nNote: We have had a couple of individuals\
    \ harrass and threaten us. These individuals did <b>not</b> try our API or speak\
    \ to anyone who has used it. They simply saw that we require a seed phrase for\
    \ certain endpoints and figured that the proper response was to attack us. (I\
    \ explain why we do <a target=\"_blank\" href=\"https://youtu.be/m9unUb8Z9qU\"\
    >here</a>.) Such harrassment and threats are not only harmful, but they are also\
    \ illegal, and we will report offenders. Do not harrass us. Rather, feel free\
    \ to discuss your concerns with us and we will be more than happy to work with\
    \ you to come up with a solution.\n\n# Pricing\n\n<b>Each user receives 50,000\
    \ free credits each month.</b> Each endpoint costs a certain amount credits. Scroll\
    \ below to any endpoint (i.e., function) to see how much each endpoint costs.\
    \ (Or CMD+F `Cost: 0 Credit`, for example)\n\nYou can learn more about our pricing\
    \ <a href=\"https://dashboard.blockchainapi.com/billing\" target=\"_blank\">here</a>.\
    \ \n\nWe frequently do custom plans. If our pricing doesn't work for you, <a href=\"\
    #section/Contact\">contact us</a>.\n\nIf you have questions, concerns, feedback,\
    \ or ideas, <a href=\"#section/Contact\">contact us</a>.\n\n# SDKs / API Wrappers\n\
    \nWe have examples using both our <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples\"\
    \ target=\"_blank\">Python wrapper and our JavaScript wrapper here</a>.\n\nWe\
    \ have built a custom <a href=\"https://github.com/BL0CK-X/the-blockchain-api-python-wrapper\"\
    \ target=\"_blank\">Python wrapper</a>.\n\n`pip install theblockchainapi`\n\n\
    We also have published a <a href=\"https://github.com/BL0CK-X/theblockchainapi-javascript-wrapper\"\
    \ target=\"_blank\">JavaScript Wrapper</a>.\n\n`npm install theblockchainapi`\n\
    \nWe also have auto-generated wrappers for the following languages:\n- <a href=\"\
    https://github.com/BL0CK-X/theblockchainapi-go-wrapper\" target = \"_blank\">Go</a>\n\
    - <a href=\"https://github.com/BL0CK-X/theblockchainapi-java-wrapper\" target\
    \ = \"_blank\">Java</a>\n- <a href=\"https://github.com/BL0CK-X/theblockchainapi-kotlin-wrapper\"\
    \ target = \"_blank\">Kotlin</a>\n- <a href=\"https://github.com/BL0CK-X/theblockchainapi-php-wrapper\"\
    \ target = \"_blank\">PHP</a>\n- <a href=\"https://github.com/BL0CK-X/theblockchainapi-swift-wrapper\"\
    \ target = \"_blank\">Swift5</a>\n- <a href=\"https://github.com/BL0CK-X/theblockchainapi-typescript-wrapper\"\
    \ target = \"_blank\">TypeScript</a>\n- <a href=\"https://github.com/BL0CK-X/theblockchainapi-csharp-wrapper\"\
    \ target = \"_blank\">C#</a>\n- <a href=\"https://github.com/BL0CK-X/theblockchainapi-dart-wrapper\"\
    \ target = \"_blank\">Dart</a>\n\nIf you would like a different language as well,\
    \ submit an issue <a href=\"https://github.com/BL0CK-X/theblockchainapi-wrappers/issues/new\"\
    \ target=\"_blank\">here</a>.\n\nIf you run into any bugs with the wrappers, submit\
    \ an issue <a href=\"https://github.com/BL0CK-X/theblockchainapi-wrappers/issues/new\"\
    \ target=\"_blank\">here</a>."
  title: The Blockchain API
  version: "null"
servers:
- url: https://api.blockchainapi.com/v1
tags:
- description: |
    Functions for using wallets, supported across several chains.
  name: Wallet
- description: |
    Functions for interacting with transactions, supported across several chains.
  name: Transaction
- description: |
    Functions for interacting with name services.
  name: Name Service
- description: |
    Functions for interacting with tokens.
  name: Token
- description: |
    The results of any asynchronous tasks that have been launched. You can poll this endpoint to see when tasks have completed.
  name: Tasks
- description: |
    A wallet consists of two things: a public key and a secret recovery phrase pair. To create a wallet, you must first create a secret recovery phrase. Then, you can generate many public keys from a secret recovery phrase.
  name: Solana Wallet
- description: |
    Easily create a Solana NFT and see related fees for creating an NFT.
  name: Solana NFT
- description: |
    Interact with the Metaplex Candy Machine smart contract on Solana.
  name: Solana Candy Machine
- description: |
    Interact with Solana accounts.
  name: Solana Account
- description: |
    Work with Solana transactions.
  name: Solana Transaction
- description: |
    Accept one-time and recurring payments with CryptoCheckout.
    We currently use our own product to accept crypto payments. You can view our acceptance page [here](https://checkout.blockchainapi.com/project/project_z5SY1HpZWENEluvnxOee/product/product_VJBYSkISQbDfquZ). You can easily set this up with our API. We have a frontend interface coming soon.
  name: CC Project
- description: |
    A product represents a specific product or service that your project/company is selling. You can create various prices for this products by creating plans.
  name: CC Product
- description: |
    A plan consists of a price (in USDC only at the moment) and a recurring frequency (e.g., every 6 hours or 1 month). For one-time payments, do not supply a value for `period`.
  name: CC Plan
- description: |
    A payment represents a payment in crypto for your product made by a user.
  name: CC Payment
- description: |
    A webhook is a request sent to your server to notify you of a new payment. When you receive the webhook, you can allow access to your product or service to the customer who paid you.
  name: CC Webhook
- description: |
    Create a project. A project is a mini-API that you can deploy super easily with our API. Even better, when other users use it, you make money! A complete example and walkthrough of the program can be found [here](https://github.com/BL0CK-X/api-developer-program).
  name: Project
- description: |
    Create an endpoint
  name: Endpoint
paths:
  /{blockchain}/wallet/generate/secret_recovery_phrase:
    post:
      description: "<a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/generate-secret-phrase\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>.\n\nUse this endpoint\
        \ to securely and randomly generate a seed phrase for a wallet. \n\n`Cost:\
        \ 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)"
      operationId: generateSeedPhrase
      parameters:
      - description: |
          The blockchain you want to use
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          enum:
          - avalanche
          - binance_smart_chain
          - ethereum
          - near
          - solana
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateSeedPhraseRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralSecretPhrase'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Generate seed phrase
      tags:
      - Wallet
  /{blockchain}/wallet/generate/private_key:
    post:
      description: "<a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/generate-private-key\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>.\n\nUse this endpoint\
        \ to securely and randomly generate a private key for a wallet. \n\n`Cost:\
        \ 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)"
      operationId: generatePrivateKey
      parameters:
      - description: |
          The blockchain you want to use
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          enum:
          - avalanche
          - binance_smart_chain
          - ethereum
          - near
          - solana
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralGeneratePrivateKeyResponse'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Generate private key
      tags:
      - Wallet
  /{blockchain}/wallet/private_key:
    post:
      description: "<a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/derive-private-key\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>.\n\nUse this endpoint\
        \ to securely derive a private key for a wallet. \n\nFor example, if you have\
        \ a seed phrase and want to derive the corresponding private key, use this\
        \ endpoint.\n\n`Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)"
      operationId: derivePrivateKey
      parameters:
      - description: |
          The blockchain you want to use
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          enum:
          - avalanche
          - binance_smart_chain
          - ethereum
          - near
          - solana
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupplyWalletRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralGeneratePrivateKeyResponse'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Derive private key
      tags:
      - Wallet
  /{blockchain}/wallet/identifier:
    post:
      description: |-
        <a href="https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/derive-wallet-identifier" target="_blank">See examples (Python, JavaScript)</a>.

        Derive the identifier for a wallet.

        `Cost: 0 Credit` (Free) (<a href="#section/Pricing">See Pricing</a>)
      operationId: deriveWalletIdentifier
      parameters:
      - description: |
          The blockchain you want to use
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          enum:
          - avalanche
          - binance_smart_chain
          - ethereum
          - near
          - solana
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupplyWalletRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WalletIdentifiers'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Derive wallet identifier
      tags:
      - Wallet
  /{blockchain}/wallet/balance:
    post:
      description: "<a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/get-wallet-balance\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>.\n    \nSee the\
        \ balance of a wallet in the native blockchain currency (e.g., ETH, SOL) or\
        \ any token (e.g., ERC-20, NFTs, SPL, etc.).\n\nTo get the balance of a specific\
        \ token, supply the `token_blockchain_identifier` of the token. \n\nYou can\
        \ also use this endpoint to see whether or not a person owns an NFT. Just\
        \ supply the `token_blockchain_identifier` of the NFT. A balance of \"1\"\
        \ means the person owns the NFT, and a balance of \"0\" means the person does\
        \ not own the NFT.\n\n`Cost: 0.25 Credit` (<a href=\"#section/Pricing\">See\
        \ Pricing</a>)"
      operationId: getBalance
      parameters:
      - description: |
          The blockchain you want to use
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          enum:
          - ethereum
          - solana
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneralBalanceRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralBalanceResponse'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Get wallet's balance of X
      tags:
      - Wallet
  /{blockchain}/wallet/airdrop:
    post:
      description: "<a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/get-airdrop\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>.\n    \n- Ethereum:\
        \ Receive an airdrop of 0.001 ETH on Ropsten (not real ETH). \n- Solana: Use\
        \ this endpoint to get an airdrop of SOL on the devnet (not real SOL). Amount\
        \ of 0.015, which is the minimum amount of SOL you need to mint an NFT and\
        \ then transfer it to another wallet.\n\n`Cost: 0 Credit` (Free) (<a href=\"\
        #section/Pricing\">See Pricing</a>)"
      operationId: getAirdrop
      parameters:
      - description: |
          The blockchain you want to use
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          enum:
          - ethereum
          - solana
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneralAirdropRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralTransactionMadeResponse'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Get an airdrop
      tags:
      - Wallet
  /{blockchain}/wallet/transfer:
    post:
      description: "<a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/transfer-crypto-token-or-nft\"\
        \ target=\"_blank\">See transfer ETH/SOL/crypto example (Python, JavaScript)</a>.\n\
        \n<a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/wallet/transfer-crypto-token-or-nft\"\
        \ target=\"_blank\">See transfer NFT/token example (Python, JavaScript)</a>.\n\
        \nThis is a powerful function. It might be slightly confusing because there\
        \ are several optional parameters, so take some time to review it. \n\nThis\
        \ function can send\n- The native currency of the selected blockchain (e.g.,\
        \ SOL, ETH, BNB, etc.)\n- A token (e.g., an SPL token, ERC-20 token, etc.)\n\
        - An NFT\n\nYou can sign and submit the transaction for confirmation; and\
        \ you can select to simply return the compiled transaction so that you can\
        \ submit it to the user for signing (e.g., via Phantom or Metamask; no private\
        \ keys required in this case).\n\nIf you're transferring an NFT or a token,\
        \ supply its respective `token_blockchain_identifier`.\n\nSENDER: Note that\
        \ the wallet information is used to authorize the sending of the tokens and\
        \ identifies the source of the tokens. If `return_compiled_transaction = false`,\
        \ we sign and submit the transaction (`wallet` is required in this case; do\
        \ not provide a value for `sender_blockchain_identifier`). If `return_compiled_transaction\
        \ = true`, we compile the transaction (`sender_blockchain_identifier` is required\
        \ in this case; do not provide `wallet`).\n\nRECIPIENT: `recipient_blockchain_identifier`\
        \ identifies the receiver. This is entirely separate from the information\
        \ used for the SENDER above. So, in this API call, there are two wallets involved,\
        \ but only one (namely, the SENDER) is needed to authorize the transaction\
        \ (if you want us to sign and submitting it).\n\nFEE_PAYER (Solana only):\
        \ The fee payer of the transaction defaults to `wallet` (or `sender_blockchain_identifier`).\
        \ To set a different fee payer, provide a value for `fee_payer_wallet`.\n\n\
        `Cost: 2 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)"
      operationId: transfer
      parameters:
      - description: |
          The blockchain you want to use
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          enum:
          - ethereum
          - solana
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeneralTransferRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralTransactionResponse'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Transfer crypto, a token, or an NFT to another wallet
      tags:
      - Wallet
  /{blockchain}/transaction/{network}/{transaction_blockchain_identifier}:
    get:
      description: "<a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/transaction/get-transaction\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>.\n    \nGet the\
        \ details of a transaction made on the specified blockchain.\n\n`Cost: 0.25\
        \ Credit` (<a href=\"#section/Pricing\">See Pricing</a>)"
      operationId: getTransaction
      parameters:
      - description: |
          The blockchain you want to use
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          enum:
          - ethereum
          - solana
          type: string
        style: simple
      - description: |-
          The network of the blockchain you selected

          - Solana: `devnet`, `mainnet-beta`
          - Ethereum: `ropsten`, `mainnet`

          Defaults when not provided (not applicable to path parameters):
          - Solana: `devnet`
          - Ethereum: `ropsten`
        example: ropsten
        explode: false
        in: path
        name: network
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          The transaction signature of the transaction.

          Examples:
          - Solana: `5wHu1qwD7q5ifaN5nwdcDqNFo53GJqa7nLp2BeeEpcHCusb4GzARz4GjgzsEHMkBMgCJMGa6GSQ1VG96Exv8kt2W`
          - Ethereum: `0x5f36b787daa57bfe8568d69e24eae54ccb00720c6edfc826bd4a7b19c525eef4`
        example: 0x5f36b787daa57bfe8568d69e24eae54ccb00720c6edfc826bd4a7b19c525eef4
        explode: false
        in: path
        name: transaction_blockchain_identifier
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneralTransaction'
          description: Transaction found. Details in response. Click "Expand All"
            in the documentation sidebar to the right to view an example.
        "400":
          description: Invalid input or issue retrieving transaction. See response
            for details
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
        "404":
          description: Task not found.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Get the details of a transaction made on a blockchain
      tags:
      - Transaction
  /{blockchain}/{network}/name_service/name_to_blockchain_identifier:
    post:
      description: "<a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/name-service/name-to-blockchain-identifier\"\
        \ target=\"_blank\">See examples (Python, JavaScript) [Coming Soon]</a>.\n\
        \    \nGet the blockchain identifier from a name.\n\ne.g., Input `vitalik.eth`\
        \ and output `0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045`\n\n`Cost: 0.25 Credit`\
        \ (<a href=\"#section/Pricing\">See Pricing</a>)"
      operationId: getBlockchainIdentifierFromName
      parameters:
      - description: |
          The blockchain you want to use
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          enum:
          - ethereum
          - solana
          type: string
        style: simple
      - description: |-
          The network of the blockchain you selected

          - Solana: `devnet`, `mainnet-beta`
          - Ethereum: `ropsten`, `mainnet`

          Defaults when not provided (not applicable to path parameters):
          - Solana: `devnet`
          - Ethereum: `ropsten`
        example: ropsten
        explode: false
        in: path
        name: network
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputName'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputBlockchainIdentifier'
          description: Successful Response
        "400":
          description: Invalid input or issue retrieving transaction. See response
            for details
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
        "404":
          description: Task not found.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Get the identifier
      tags:
      - Name Service
  /{blockchain}/{network}/name_service/blockchain_identifier_to_name:
    post:
      description: "<a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/name-service/blockchain-identifier-to-name\"\
        \ target=\"_blank\">See examples (Python, JavaScript) [Coming Soon]</a>.\n\
        \    \nGet the name from a blockchain identifier.\n\ne.g., Input `0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045`\
        \ and output `vitalik.eth`\n\n`Cost: 0.25 Credit` (<a href=\"#section/Pricing\"\
        >See Pricing</a>)"
      operationId: getNameForBlockchainIdentifier
      parameters:
      - description: |
          The blockchain you want to use
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          enum:
          - ethereum
          - solana
          type: string
        style: simple
      - description: |-
          The network of the blockchain you selected

          - Solana: `devnet`, `mainnet-beta`
          - Ethereum: `ropsten`, `mainnet`

          Defaults when not provided (not applicable to path parameters):
          - Solana: `devnet`
          - Ethereum: `ropsten`
        example: ropsten
        explode: false
        in: path
        name: network
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InputBlockchainIdentifier'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InputName'
          description: Successful Response
        "400":
          description: Invalid input or issue retrieving transaction. See response
            for details
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
        "404":
          description: Task not found.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Get the name
      tags:
      - Name Service
  /{blockchain}/{network}/token/{token_blockchain_identifier}:
    get:
      description: "<a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/tokens/get-token-metadata\"\
        \ target=\"_blank\">See examples (Python, JavaScript) [Coming Soon]</a>.\n\
        \    \nGet the metadata of a token.\n\n`Cost: 0.25 Credit` (<a href=\"#section/Pricing\"\
        >See Pricing</a>)"
      operationId: getTokenMetadata
      parameters:
      - description: |
          The blockchain you want to use
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          enum:
          - ethereum
          - solana
          type: string
        style: simple
      - description: |-
          The network of the blockchain you selected

          - Solana: `devnet`, `mainnet-beta`
          - Ethereum: `ropsten`, `mainnet`

          Defaults when not provided (not applicable to path parameters):
          - Solana: `devnet`
          - Ethereum: `ropsten`
        example: ropsten
        explode: false
        in: path
        name: network
        required: true
        schema:
          type: string
        style: simple
      - description: |
          The identifier of the token (e.g., `mint_address` on `Solana` or `token_address` on `Ethereum`)
        explode: false
        in: path
        name: token_blockchain_identifier
        required: true
        schema:
          enum:
          - ethereum
          - solana
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenMetadataResponse'
          description: Successful Response
        "400":
          description: Invalid input or issue retrieving transaction. See response
            for details
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
        "404":
          description: Task not found.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Get a token's metadata
      tags:
      - Token
  /{blockchain}/{network}/all_tokens:
    get:
      description: "<a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/tokens/get-all-tokens\"\
        \ target=\"_blank\">See examples (Python, JavaScript) [Coming Soon]</a>.\n\
        \    \nList all tokens.\n\n`Cost: 1 Credit` (<a href=\"#section/Pricing\"\
        >See Pricing</a>)"
      operationId: listAllTokens
      parameters:
      - description: |
          The blockchain you want to use
        explode: false
        in: path
        name: blockchain
        required: true
        schema:
          enum:
          - solana
          type: string
        style: simple
      - description: |-
          The network of the blockchain you selected

          - Solana: `devnet`, `mainnet-beta`
          - Ethereum: `ropsten`, `mainnet`

          Defaults when not provided (not applicable to path parameters):
          - Solana: `devnet`
          - Ethereum: `ropsten`
        example: ropsten
        explode: false
        in: path
        name: network
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TokenMetadataResponse'
                type: array
          description: Successful Response
        "400":
          description: Invalid input or issue retrieving transaction. See response
            for details
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
        "404":
          description: Task not found.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: List all tokens
      tags:
      - Token
  /solana/account/{network}/{public_key}:
    get:
      description: "<a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-account/get-account\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>.\n    \nGet the\
        \ details of an account on Solana. Learn more about accounts <a href=\"https://docs.solana.com/developing/programming-model/accounts\"\
        \ target=\"_blank\">here</a>.\n\n`Cost: 0.25 Credit` (<a href=\"#section/Pricing\"\
        >See Pricing</a>)"
      operationId: solanaGetAccount
      parameters:
      - description: The network ID (devnet, mainnet-beta)
        example: mainnet-beta
        explode: false
        in: path
        name: network
        required: true
        schema:
          type: string
        style: simple
      - description: The public key of the account
        example: EEr5yQpNXf7Bru6Rt5podx56HGW9CEehXqgRGh2wa71w
        explode: false
        in: path
        name: public_key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
          description: Account found. Details in response.
        "400":
          description: Invalid input or issue retrieving transaction. See response
            for details
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
        "404":
          description: Task not found.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Get the details of an account on Solana
      tags:
      - Solana Account
  /solana/account/{network}/{public_key}/is_nft:
    get:
      description: "<a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-account/get-is-nft\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>.\n    \nDetermine\
        \ whether or not a public key is an NFT `mint address`\n\n`Cost: 0.5 Credit`\
        \ (<a href=\"#section/Pricing\">See Pricing</a>)"
      operationId: solanaGetAccountIsNFT
      parameters:
      - description: The network ID (devnet, mainnet-beta)
        example: mainnet-beta
        explode: false
        in: path
        name: network
        required: true
        schema:
          type: string
        style: simple
      - description: The public key of the account
        example: EEr5yQpNXf7Bru6Rt5podx56HGW9CEehXqgRGh2wa71w
        explode: false
        in: path
        name: public_key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountIsNFT'
          description: Successful response
        "400":
          description: Invalid input or issue retrieving transaction. See response
            for details
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
        "404":
          description: Task not found.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Get if account is NFT
      tags:
      - Solana Account
  /solana/account/{network}/{public_key}/is_candy_machine:
    get:
      description: "<a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-account/get-is-candy-machine\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>.\n    \nDetermine\
        \ whether or not a public key address corresponds to a candy machine ID or\
        \ candy machine configuration.\n\n`Cost: 1 Credit` (<a href=\"#section/Pricing\"\
        >See Pricing</a>)"
      operationId: solanaGetAccountIsCandyMachine
      parameters:
      - description: The network ID (devnet, mainnet-beta)
        example: mainnet-beta
        explode: false
        in: path
        name: network
        required: true
        schema:
          type: string
        style: simple
      - description: The public key of the account
        example: EEr5yQpNXf7Bru6Rt5podx56HGW9CEehXqgRGh2wa71w
        explode: false
        in: path
        name: public_key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountIsCandyMachine'
          description: Successful response
        "400":
          description: Invalid input or issue retrieving transaction. See response
            for details
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
        "404":
          description: Task not found.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Get if account is candy machine
      tags:
      - Solana Account
  /solana/spl-token/{network}/{public_key}:
    get:
      description: |-
        <a href="https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-spl-token/get-spl-token" target="_blank">See examples (Python, JavaScript)</a>.

        Retrieves basic information about an SPL token given its `mint_address`.

        You can see the mint addresses of popular SPL tokens <a href="https://raw.githubusercontent.com/solana-labs/token-list/main/src/tokens/solana.tokenlist.json" target="_blank">here</a>.

        Some example mint addresses of SPL tokens:
        - USDC: EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v
        - Mango: MangoCzJ36AjZyKwVj3VnYU4GTonjfVEnJmvvWaxLac
        - Serum: SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt
        - Raydium: 4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R
        - wSOL: So11111111111111111111111111111111111111112
        - ATLAS: ATLASXmbPQxBUYbxPsV97usA3fPQYEqzQBUHgiFCUsXx

        `Cost: 1 Credit` (<a href="#section/Pricing">See Pricing</a>)
      operationId: solanaGetSPLToken
      parameters:
      - description: The public key of the token
        example: MangoCzJ36AjZyKwVj3VnYU4GTonjfVEnJmvvWaxLac
        explode: false
        in: path
        name: public_key
        required: true
        schema:
          type: string
        style: simple
      - description: The network ID (devnet, mainnet-beta)
        example: mainnet-beta
        explode: false
        in: path
        name: network
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSPLTokenResponse'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
        "404":
          description: Account not found / not initialized with this public key address.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Get SPL token metadata
      tags:
      - Solana SPL Token
  /solana/transaction/{network}/{tx_signature}:
    get:
      description: "<a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-transaction/get-transaction\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>.\n    \nGet the\
        \ details of a transaction made on Solana.\n\n`Cost: 0.25 Credit` (<a href=\"\
        #section/Pricing\">See Pricing</a>)"
      operationId: solanaGetTransaction
      parameters:
      - description: The network ID (devnet, mainnet-beta)
        example: mainnet-beta
        explode: false
        in: path
        name: network
        required: true
        schema:
          type: string
        style: simple
      - description: The transaction signature of the transaction
        example: 5wHu1qwD7q5ifaN5nwdcDqNFo53GJqa7nLp2BeeEpcHCusb4GzARz4GjgzsEHMkBMgCJMGa6GSQ1VG96Exv8kt2W
        explode: false
        in: path
        name: tx_signature
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: Transaction found. Details in response. Click "Expand All"
            in the documentation sidebar to the right to view an example.
        "400":
          description: Invalid input or issue retrieving transaction. See response
            for details
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
        "404":
          description: Task not found.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Get the details of a transaction made on Solana
      tags:
      - Solana Transaction
  /solana/wallet/generate/secret_recovery_phrase:
    post:
      description: "<a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/generate-secret-phrase\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>.\n\nUse this endpoint\
        \ to securely and randomly generate a secret recovery phrase for a Solana\
        \ wallet. \n\n`Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)"
      operationId: solanaGenerateSecretRecoveryPhrase
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecretPhrase'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Generate secret phrase
      tags:
      - Solana Wallet
  /solana/wallet/generate/private_key:
    post:
      description: |-
        <a href="https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/generate-private-key" target="_blank">See examples (Python, JavaScript)</a>.

        Use this endpoint to securely and randomly generate a private key for a Solana wallet.

        `Cost: 0 Credit` (Free) (<a href="#section/Pricing">See Pricing</a>)
      operationId: solanaGeneratePrivateKey
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratePrivateKey'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Generate private key
      tags:
      - Solana Wallet
  /solana/wallet/private_key:
    post:
      description: "<a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/derive-private-key\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>.\n    \nReturns\
        \ a private key array and a base58-encoded private key given wallet authentication.\n\
        \nA wallet is defined by a public key. A public key is derived from a combination\
        \ of seed phrase, derivation path, and passphrase. Changing any *one* of these\
        \ three will change the public key output.\n\n*You can generate a unique public\
        \ key with each combination of secret recovery phrase, passphrase, and derivation\
        \ path. Thus,\nwith a single secret recovery phrase, you can generate many\
        \ public keys. If you are just starting, just supply the secret recovery phrase\
        \ you generated with the Solana Wallet Secret Recovery Phrase endpoint.*\n\
        \n*If you are trying to get a public key that already exists (e.g., created\
        \ in the Phantom wallet), make sure you use the correct derivation path and\
        \ passphrase. To read more about that, see the descriptions of those parameters\
        \ below.*\n\n`Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)"
      operationId: solanaDerivePrivateKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPublicKeyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeneratePrivateKey'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Derive private key
      tags:
      - Solana Wallet
  /solana/wallet/public_key:
    post:
      description: "<a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/derive-public-key\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>.\n    \nReturns\
        \ a public key given wallet authentication.\n\nA wallet is identified by a\
        \ public key. A public key is derived from a combination of seed phrase, derivation\
        \ path, and passphrase. Changing any *one* of these three will change the\
        \ public key output. \n\nIt can also be derived from a private key.\n\n*You\
        \ can generate a unique public key with each combination of secret recovery\
        \ phrase, passphrase, and derivation path; or from a private key. Thus,\n\
        with a single secret recovery phrase, you can generate many public keys; however,\
        \ with a private key, you can only generate one public key. If you are just\
        \ starting, generate a <a href=\"#operation/solanaGenerateSecretRecoveryPhrase\"\
        >secret recovery phrase</a> or <a href=\"#operation/solanaGeneratePrivateKey\"\
        >private key</a>.\n\n*If you are trying to get a public key that already exists\
        \ (e.g., created in the Phantom wallet), make sure you use the correct derivation\
        \ path and passphrase; or just use the private key. To read more about that,\
        \ see the descriptions of those parameters below.*\n\n`Cost: 0 Credit` (Free)\
        \ (<a href=\"#section/Pricing\">See Pricing</a>)"
      operationId: solanaDerivePublicKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetPublicKeyRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicKey'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Derive public key
      tags:
      - Solana Wallet
  /solana/wallet/transfer:
    post:
      description: |-
        <a href="https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/transfer-sol" target="_blank">See transfer SOL example (Python, JavaScript)</a>.

        <a href="https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/transfer-nft" target="_blank">See transfer NFT example (can also be used for SPL token) (Python, JavaScript)</a>.

        This is a powerful function. It might be slightly confusing because there are several optional parameters, so take some time to review it. This function can send SOL, send an SPL token, or send an NFT. You can set the fee payer of the transaction; you can sign and submit the transaction for confirmation; and you can select to simply return the compiled transaction so that you can submit it to the user for signing (e.g., via Phantom; no private keys required in this case).

        Transfer SOL, a token or an NFT to another address. If you're transferring an NFT, supply the `mint` (the address of the mint) for the `token_address`.

        SENDER: Note that the wallet information is used to authorize the sending of the tokens and identifies the source of the tokens. If `return_compiled_transaction = false`, we sign and submit the transaction (`wallet` is required in this case; do not provide a value for `sender_public_key`). If `return_compiled_transaction = true`, we compile the transaction (one of `wallet` or `sender_public_key` is required in this case; do not provide both).

        RECIPIENT: `recipient_address` identifies the receiver. This is entirely separate from the information used for the SENDER above. So, in this API call, there are two wallets involved, but only one (namely, the SENDER) is needed to authorize the transaction.

        FEE_PAYER: The fee payer of the transaction defaults to `wallet` (or `sender_public_key`). To set a different fee payer, provide a value for `fee_payer_wallet`.

        If you're transfering a token, supply the token address found on the explorer (e.g., see `SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt` for <a href="https://explorer.solana.com/address/SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt" target="_blank">Serum Token</a>) for the `token_address`. If you're transferring SOL, do not supply a value for `token_address`.

        `Cost: 2 Credit` (<a href="#section/Pricing">See Pricing</a>)
      operationId: solanaTransfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DoubleTransferResponse'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Transfer SOL, a token, or an NFT to another address
      tags:
      - Solana Wallet
  /solana/wallet/{public_key}/associated_token_account/{mint_address}:
    get:
      description: "<a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/derive-associated-token-account-address\"\
        \ target=\"_blank\">See example (Python, JavaScript)</a>.\n    \n*Each wallet\
        \ can own tokens, but in Solana, each token is actually held by an <a href=\"\
        https://spl.solana.com/associated-token-account\" target=\"_blank\">associated\
        \ token account</a> (ATA), which is an account specific for a token owned\
        \ by the wallet. When you transfer an SPL token, such as Serum, or transfer\
        \ an NFT, you're transfering from an ATA you own to another person's ATA for\
        \ that specific token. With this endpoint, you can derive an associated token\
        \ address given a wallet and a token address.*\n\n`Cost: 0 Credit` (Free)\
        \ (<a href=\"#section/Pricing\">See Pricing</a>)"
      operationId: solanaDeriveAssociatedTokenAccountAddress
      parameters:
      - description: The public key of the wallet
        example: 31LKs39pjT5oj6fWjC3F76dHWf9489asCthmgj8wu7pj
        explode: false
        in: path
        name: public_key
        required: true
        schema:
          type: string
        style: simple
      - description: The mint address of the token (either SPL or NFT)
        example: 7EWJNaNYfPYMaqzdAAa4ps5kpqW95B7VHsjhW1kr18sj
        explode: false
        in: path
        name: mint_address
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ATAResponse'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Derive an associated token account address
      tags:
      - Solana Wallet
  /solana/wallet/airdrop:
    post:
      description: "<a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/get-airdrop\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>.\n    \nUse this\
        \ endpoint to get an airdrop of SOL on the devnet (not real SOL). Amount of\
        \ 0.015, \nwhich is the minimum amount of SOL you need to mint a Metaplex\
        \ NFT and then transfer it to another wallet.\n\n`Cost: 0 Credit` (Free) (<a\
        \ href=\"#section/Pricing\">See Pricing</a>)"
      operationId: solanaGetAirdrop
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AirdropRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransferResponse'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Get an airdrop on devnet
      tags:
      - Solana Wallet
  /solana/wallet/balance:
    post:
      description: "<a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/get-wallet-balance\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>.\n    \nSee the\
        \ balance of a wallet in SOL or any SPL token.\n\nTo get the balance of an\
        \ SPL token, supply the `mint_address` of the SPL token. The list of SPL tokens\
        \ can be viewed <a href=\"https://raw.githubusercontent.com/solana-labs/token-list/main/src/tokens/solana.tokenlist.json\"\
        \ target=\"_blank\">here</a>.\n\nYou can also use this endpoint to see whether\
        \ or not a person owns an NFT. Just supply the `mint_address` of the NFT.\
        \ A balance of \"1\" means the person owns the NFT, and a balance of \"0\"\
        \ means the person does not own the NFT. This works in most cases, but we\
        \ are aware of one edge case where a balance of \"0\" will show up for a person\
        \ who is actually the owner of the NFT. We just recommend using the <a href=\"\
        #operation/solanaGetNFTOwner\">getNFTOwner</a> endpoint and comparing that\
        \ output to the expected address.\n\n`Cost: 0.25 Credit` (<a href=\"#section/Pricing\"\
        >See Pricing</a>)"
      operationId: solanaGetBalance
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BalanceRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BalanceResponse'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Get wallet's balance in SOL or any SPL
      tags:
      - Solana Wallet
  /solana/wallet/{network}/{public_key}/tokens:
    get:
      description: "<a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/get-wallet-token-holdings\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>.\n    \nSee the\
        \ token holdings of a given public key address\n\n`Cost: 2 Credits` (<a href=\"\
        #section/Pricing\">See Pricing</a>)"
      operationId: solanaGetTokensBelongingToWallet
      parameters:
      - description: The network ID (devnet, mainnet-beta)
        example: mainnet-beta
        explode: false
        in: path
        name: network
        required: true
        schema:
          type: string
        style: simple
      - description: The public key of the account whose list of owned NFTs you want
          to get
        example: GKNcUmNacSJo4S2Kq3DuYRYRGw3sNUfJ4tyqd198t6vQ
        explode: false
        in: path
        name: public_key
        required: true
        schema:
          type: string
        style: simple
      - description: Whether or not to include NFTs in the response
        example: false
        explode: true
        in: query
        name: include_nfts
        required: false
        schema:
          default: false
          type: boolean
        style: form
      - description: Whether or not to include holdings that have zero balance. This
          indicates that the wallet held this token or NFT in the past, but no longer
          holds it.
        example: false
        explode: true
        in: query
        name: include_zero_balance_holdings
        required: false
        schema:
          default: false
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTokensResponse'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Get address's tokens and respective balances
      tags:
      - Solana Wallet
  /solana/wallet/{network}/{public_key}/transactions:
    get:
      description: "<a href=\"https://github.com/BL0CK-X/blockchain-api/tree/main/examples/solana-wallet/get-wallet-transactions\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>.\n    \nSee the\
        \ transaction signatures of a given public key address\n\n`Cost: 1 Credits`\
        \ (<a href=\"#section/Pricing\">See Pricing</a>)"
      operationId: solanaGetWalletTransactions
      parameters:
      - description: The network ID (devnet, mainnet-beta)
        example: mainnet-beta
        explode: false
        in: path
        name: network
        required: true
        schema:
          type: string
        style: simple
      - description: The public key of the account whose list of signatures you want
          to get
        example: GKNcUmNacSJo4S2Kq3DuYRYRGw3sNUfJ4tyqd198t6vQ
        explode: false
        in: path
        name: public_key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTransactionsResponse'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Get address's associated transaction signatures
      tags:
      - Solana Wallet
  /solana/wallet/{network}/{public_key}/nfts:
    get:
      description: "<a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-wallet/get-wallet-nfts\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>.\n    \nSee the\
        \ NFTs that belong to a given public key address\n\n`Cost: 3 Credits` (<a\
        \ href=\"#section/Pricing\">See Pricing</a>)"
      operationId: solanaGetNFTsBelongingToWallet
      parameters:
      - description: The network ID (devnet, mainnet-beta)
        example: mainnet-beta
        explode: false
        in: path
        name: network
        required: true
        schema:
          type: string
        style: simple
      - description: The public key of the account whose list of owned NFTs you want
          to get
        example: HE3ZYk4aWfKD7R9EmFQbxjj75JdgHuDztNAsseKVan82
        explode: false
        in: path
        name: public_key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListNFTsResponse'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Get address's NFTs
      tags:
      - Solana Wallet
  /solana/nft:
    post:
      description: "<a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/create-an-nft\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>.\n\nCreate a Metaplex\
        \ NFT on Solana. \n\nRead more on this <a href=\"https://blog.blockchainapi.com/2021/11/16/a-note-on-nfts.html\"\
        \ target=\"_blank\">here</a>.\n\nNote: Please see <a href=\"https://blog.blockchainapi.com/2022/01/18/how-to-format-off-chain-nft-metadata.html\"\
        \ target=\"_blank\">this article</a> to learn more about what `nft_upload_method`\
        \ means and how storing the metadata of an NFT works.\n\nIf you're using `nft_upload_method\
        \ = \"LINK\"`, then to add attributes to the NFT or an image, add them to\
        \ a JSON file and upload that to Arweave/IPFS/Filecoin. See the JSON format\
        \ <a href=\"https://blog.blockchainapi.com/2022/01/18/how-to-format-off-chain-nft-metadata.html\"\
        >here</a>.\n\nThen supply the link to the JSON file in `nft_url`. \n\nNOTE:\
        \ Don't use `nft_metadata`. Values provided here do not do anything at the\
        \ moment. We are fixing this soon.\n\n`Cost: 5 Credits` (<a href=\"#section/Pricing\"\
        >See Pricing</a>)"
      operationId: solanaCreateNFT
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NFTMintRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NFT'
          description: Successful Response
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NFTMintErrorResponse'
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
        "414":
          description: URI too long (the data you provided was too large [e.g., the
            metadata provided was 500kb])
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Create an NFT on Solana
      tags:
      - Solana NFT
  /solana/nft/search:
    post:
      description: |-
        <a href="https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/search-nfts" target="_blank">See examples (Python, JavaScript)</a>.

        With this endpoint, you can search for NFTs by their symbol, name of NFTs, uuid, configuration address, and update authority.

        The output is a list of NFTs that match your query.

        You can also provide multiple search clauses, such as the update authority (`update_authority="G17UmNGnMJ851x3M1JXocgpft1afcYedjPuFpo1ohhCk"`) and symbol begins with "Sol" (`symbol="Sol", symbol_search_method='begins_with'`).

        `Cost: 1 Credit` (<a href="#section/Pricing">See Pricing</a>)
      operationId: solanaSearchNFTs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NFTSearchRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/NFTSearchResponse'
                type: array
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Search NFTs on Solana
      tags:
      - Solana NFT
  /solana/nft/{network}/{mint_address}:
    get:
      description: "<a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/get-nft-metadata\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>. \n    \nGet the\
        \ metadata of an NFT.\n\nIf you're looking for metadata such as attributes\
        \ and others, you can retrieve them from the link in the URI field of the\
        \ NFT metadata returned. See the example on the right. The URI is an Arweave\
        \ URL. That contains the attributes and other information about the NFT. That\
        \ URL is stored on the Solana blockchain.\n\n`Cost: 0.25 Credit` (<a href=\"\
        #section/Pricing\">See Pricing</a>)"
      operationId: solanaGetNFT
      parameters:
      - description: The network ID
        example: mainnet-beta
        explode: false
        in: path
        name: network
        required: true
        schema:
          enum:
          - devnet
          - mainnet-beta
          type: string
        style: simple
      - description: The mint address of the NFT
        example: EEr5yQpNXf7Bru6Rt5podx56HGW9CEehXqgRGh2wa71w
        explode: false
        in: path
        name: mint_address
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NFT'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
        "404":
          description: The doesn't exist
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Get an NFT's metadata
      tags:
      - Solana NFT
  /solana/nft/{network}/{mint_address}/owner:
    get:
      description: "<a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/get-nft-owner\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>. \n    \nGet the\
        \ owner of an NFT. This returns the public key of the wallet that owns the\
        \ associated token account that owns the NFT.\n\nIf you want to get the associated\
        \ token account that literally owns the NFT, derive the associated token account\
        \ address from the public key returned and the NFT mint address using <a href=\"\
        #operation/solanaDeriveAssociatedTokenAccountAddress\">this endpoint</a>.\n\
        \n`Cost: 0.25 Credit` (<a href=\"#section/Pricing\">See Pricing</a>)"
      operationId: solanaGetNFTOwner
      parameters:
      - description: The network ID
        example: devnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          enum:
          - devnet
          - mainnet-beta
          type: string
        style: simple
      - description: The mint address of the NFT
        example: 4zH3Rwm1QXdfTSUqsYmeUBY4QqQmQEXJVbv4ErSK736Q
        explode: false
        in: path
        name: mint_address
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NFTOwnerResponse'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
        "404":
          description: The doesn't exist
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Get owner of an NFT
      tags:
      - Solana NFT
  /solana/nft/{network}/{mint_address}/owner_advanced:
    get:
      description: "<a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/get-nft-owner\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>. \n    \nGet the\
        \ owner, state, listed price, and listed marketplace (if any) of an NFT. \n\
        \nHere's are a couple of example responses:\n```\n{\n    'contract': {\n \
        \       'contract_blockchain_identifier': 'M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K',\
        \ \n        'contract_id': 'magic-eden-v2', \n        'contract_name': 'Magic\
        \ Eden v2', \n        'contract_type': 'marketplace'\n    }, \n    'owner':\
        \ '25UJMR3FiMM6noQtPEaCJ6eDU2YQ7myDhikVQXmMuSRW', \n    'price': 50000000,\
        \ \n    'state': 'listing'\n}\n```\n\n```\n{\n    'contract': null, \n   \
        \ 'owner': 'C37PJiJU8WTgoUoFqmB1Maw8hkuENDZoGDQA1pm54Fdd', \n    'price':\
        \ null, \n    'state': 'holding'\n}\n```\n\nThis function will return whether\
        \ the NFT is `listed`, `loaned` (Yawww NFT loans), `otc`, `staked`, `burned`,\
        \ or `held`.\n\nIf listed, it will return the contract, the readable name\
        \ of the contract (e.g., Magic Eden, OpenSea), the contract ID (if any; e.g.,\
        \ open-sea), the owner, and the listed price. From this, you can get the floor\
        \ of a collection. We currently support Magic Eden (v1, v2), Exchange.Art\
        \ (auction, singles), CoralCube, Solanart (v1, v2), Yawww Loans, Yawww OTC,\
        \ OpenSea, Fractal, SolSea, and AlphaArt. \n\nIf loaned, it will return the\
        \ loan requester as the owner, the loan amount, and the loan contract. We\
        \ only support the Yawww loaning contract.\n\nIf listed on an OTC marketplace,\
        \ it will return the same information as `listed`. OTC is used to distinguish\
        \ between marketplaces that respect royalties (OTC) and those that don't (normal\
        \ ones). The only `OTC` contract we track is Yawwww, at the moment. We do\
        \ not yet track Solanart v3.\n\nIf staked, it will return the owner and the\
        \ staking contract public key.\n\nIf burned, it will return the `burner` as\
        \ the `owner`.\n\nIf held, it will simply return the owner.\n\nIf you want\
        \ to get the literal owner, which may or may not be the same as the owner\
        \ returned here, call the simplified [get NFT owner function](/#tag/Solana-NFT/operation/solanaGetNFTOwner).\
        \ For example, Bob might own the NFT, but if it is listed on Magic Eden, then\
        \ the NFT is held in escrow and \"owned\" by Magic Eden. The simplified function\
        \ will return Magic Eden as the owner (the literal owner). This advanced function\
        \ will tell you the implied owner, which would be Bob.\n\n`Cost: 1.0 Credit`\
        \ (<a href=\"#section/Pricing\">See Pricing</a>)"
      operationId: solanaGetNFTOwnerAdvanced
      parameters:
      - description: The network ID
        example: devnet
        explode: false
        in: path
        name: network
        required: true
        schema:
          enum:
          - devnet
          - mainnet-beta
          type: string
        style: simple
      - description: The mint address of the NFT
        example: 4zH3Rwm1QXdfTSUqsYmeUBY4QqQmQEXJVbv4ErSK736Q
        explode: false
        in: path
        name: mint_address
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NFTOwnerAdvancedResponse'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
        "404":
          description: The doesn't exist
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Get owner of an NFT (advanced)
      tags:
      - Solana NFT
  /solana/nft/mint/fee:
    get:
      description: "<a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/get-nft-mint-fee\"\
        \ target=\"_blank\">See examples (Python, JavaScript)</a>.\n    \nGet the\
        \ estimated fee for minting an NFT on the Solana blockchain using the Metaplex\
        \ protocol.\n\n`Cost: 0 Credit` (Free) (<a href=\"#section/Pricing\">See Pricing</a>)"
      operationId: solanaGetNFTMintFee
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NFTMintFee'
          description: Successful Response
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Get the NFT mint fee
      tags:
      - Solana NFT
  /solana/nft/candy_machine_id:
    post:
      description: |-
        <a href="https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-nft/get-nft-candy-machine-id" target="_blank">See examples (Python, JavaScript)</a>.

        Get the candy machine ID from where the NFT came, if any. NFTs can also be minted without a candy machine.

        It's also possible that we return "Not Found" when the NFT actually did come from a version of a candy machine. We check for the most popular versions of candy machine, but it is possible that someone creates their own candy machine version and mints NFTs from it.

        `Cost: 1 Credit` (<a href="#section/Pricing">See Pricing</a>)
      operationId: solanaGetNFTsCandyMachineId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCandyMachineIDRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCandyMachineIDResponse'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
        "404":
          description: Not found
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: |
        Get the ID of the candy machine of an NFT
      tags:
      - Solana NFT
  /solana/nft/candy_machine/search:
    post:
      description: |-
        <a href="https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-candy-machine/search-candy-machines" target="_blank">See examples (Python, JavaScript)</a>.

        With this endpoint, you can search candy machines by their symbol, name of NFTs, uuid, configuration address, and update authority.

        The output is a list of config addresses.

        You can also provide multiple search clauses, such as the update authority (`update_authority="G17UmNGnMJ851x3M1JXocgpft1afcYedjPuFpo1ohhCk"`) and symbol begins with "Sol" (`symbol="Sol", symbol_search_method='begins_with'`).

        `Cost: 2 Credits` (<a href="#section/Pricing">See Pricing</a>)
      operationId: solanaSearchCandyMachines
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandyMachineSearchRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                - 9AYhVG9rH4DwPufEmSD1PD3vs64GhaXWNzXb33jFpByA
                - FmZNv5HqPWEqXHYtKPKe15WF8PuNk1FbJmVMN92dVjNP
                - 6Anxd2Tn7KEEMKpGyBdVWTCp5jpAum8cppgXMJTzp44R
                items:
                  description: The config address of a matching candy machine
                  type: string
                type: array
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: Search CMs
      tags:
      - Solana Candy Machine
  /solana/nft/candy_machine/list:
    get:
      description: |-
        <a href="https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-candy-machine/list-all-candy-machines" target="_blank">See examples (Python, JavaScript)</a>.

        With this endpoint, you can list all candy machines published to Solana mainnet.

        We update this data every 15 minutes.

        The output is a list of config addresses, currently about 17000 in length.

        `Cost: 2 Credits` (<a href="#section/Pricing">See Pricing</a>)
      operationId: solanaListAllCandyMachines
      responses:
        "200":
          content:
            application/json:
              schema:
                example:
                  last_updated: 1639529803
                  config_addresses:
                  - 9AYhVG9rH4DwPufEmSD1PD3vs64GhaXWNzXb33jFpByA
                  - FmZNv5HqPWEqXHYtKPKe15WF8PuNk1FbJmVMN92dVjNP
                  - 6Anxd2Tn7KEEMKpGyBdVWTCp5jpAum8cppgXMJTzp44R
                  config_addresses_v1:
                  - 9AYhVG9rH4DwPufEmSD1PD3vs64GhaXWNzXb33jFpByA
                  - FmZNv5HqPWEqXHYtKPKe15WF8PuNk1FbJmVMN92dVjNP
                  - 6Anxd2Tn7KEEMKpGyBdVWTCp5jpAum8cppgXMJTzp44R
                  config_addresses_v2:
                  - BfA9f9My57iUQE1tFNd2hNzFMK9fRMbyDvWNGuFw38gB
                  - w8cmmrTixuf2rdVbxLLFsiRwcZrERxMfb8JbDKSj26f
                  - C1tf83mSHT7aptd5VagjY2VXjfqa7qgkZkjiW5nPQshN
                  config_addresses_magic-eden-v1:
                  - GXYYT2V594gfXoYWFj4UXbEMkymoZ6hVwxqWXjQmwRBa
                  - 8fFG9VsS1PGEuQZJjxZMjXfimysUfR1sePcTqq1AehCM
                  - 4PN9nnWC4ttvNpNxxaGyTkpMyVfG1a7N54U4cr4nwigF
                properties:
                  last_updated:
                    description: The unix epoch time stamp of when the candy machine
                      list was last updated (UTC time)
                    type: int
                  config_addresses:
                    description: List of `v1` config addresses. Only supplied for
                      backwards compatibility.
                    items:
                      properties:
                        config_address:
                          description: The config addresses of a `v1` candy machine
                          type: string
                    type: array
                  config_addresses_v1:
                    description: List of config addresses for all `v1` candy machines
                      on Solana.
                    items:
                      properties:
                        config_address:
                          description: The config address of a `v1` candy machine
                          type: string
                    type: array
                  config_addresses_v2:
                    description: List of config addresses for all `v2` candy machines
                      on Solana.
                    items:
                      properties:
                        config_address:
                          description: The config address of a `v2` candy machine
                          type: string
                    type: array
                  config_addresses_magic-eden-v1:
                    description: List of config addresses for all `Magic Eden` candy
                      machines on Solana.
                    items:
                      properties:
                        config_address:
                          description: The config address of a `Magic Eden` candy
                            machine
                          type: string
                    type: array
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: List all CMs
      tags:
      - Solana Candy Machine
  /solana/nft/candy_machine/{network}/{candy_machine_id}/nfts:
    get:
      description: "<a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-candy-machine/get-candy-machine-all-nfts\"\
        \ target=\"_blank\"> See examples (Python, JavaScript)</a>.\n\nUse this endpoint\
        \ to get the list of all NFTs (minted and unminted) from a Solana Candy Machine.\n\
        \nThis works for `v1` and `v2` candy machines. \n\n*However*, for `v2` only\
        \ the value for `all_nfts` is provided. To determine which are minted and\
        \ unminted follow this example.\n\nYou do not need to specify `v1` or `v2`\
        \ for this endpoint as it will automatically determine it from the candy machine\
        \ ID.\n\nSee example for how to get the list of NFT hashes <a href=\"https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-candy-machine/get-candy-machine-hash-table\"\
        \ target=\"_blank\">here</a>.\n\n\n\n`Cost: 2 Credits` (<a href=\"#section/Pricing\"\
        >See Pricing</a>)"
      operationId: solanaGetAllNFTsFromCandyMachine
      parameters:
      - description: The network ID
        example: mainnet-beta
        explode: false
        in: path
        name: network
        required: true
        schema:
          enum:
          - devnet
          - mainnet-beta
          type: string
        style: simple
      - description: The ID of the candy machine
        example: FmkrvXRenCGtwBHw3VtBcExp8eTdnau97upaewF4GUEX
        explode: false
        in: path
        name: candy_machine_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllNFTsResponse'
          description: Successful Response. Click "Expand All" on the right sidebar
            to see more.
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
        "404":
          description: Not found
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: "Get CM's NFTs \n"
      tags:
      - Solana Candy Machine
  /solana/nft/candy_machine/metadata:
    post:
      description: |-
        <a href="https://github.com/BL0CK-X/the-blockchain-api/tree/main/examples/solana-candy-machine/get-candy-machine-metadata" target="_blank">See examples (Python, JavaScript)</a>.

        Use this endpoint to get metadata about a Metaplex candy machine. This includes the goLiveDate, itemsAvailable, and itemsRedeemed. To see what is included, expand the green successful response below.

        NOTE: Supply exactly one of `candy_machine_id`, `config_address`, or `uuid`. If you provide more than one, you will receive a `400` error.


        `Cost: 2 Credits` (<a href="#section/Pricing">See Pricing</a>)
      operationId: solanaGetCandyMachineMetadata
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCandyMetadataRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCandyMetadataResponse'
          description: |
            Successful Response.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCandyMetadataErrorResponse'
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "402":
          description: Payment required. Occurs when you run out of API requests.
            Upgrade <a href="https://dashboard.theblockchainapi.com/billing" target="_blank">here</a>.
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: |
        Get a CM's metadata
      tags:
      - Solana Candy Machine
  /checkout/v1/project:
    post:
      description: |-
        A project represents that project or company that is accepting payments.

        A project can have products, which can have multiple plans (prices) each.

        To create a project, you just need to supply a name and a Solana public key to receive payments.

        `Cost: 0 Credit` (Free) (<a href="#section/Pricing">See Pricing</a>)
      operationId: createCCProject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CCProjectCreateRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CCProject'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "429":
          description: Rate limited
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: |
        Create a project
      tags:
      - CC Project
  /checkout/v1/project/{project_id}:
    delete:
      description: |-
        Delete a project.

        `Cost: 0 Credit` (Free) (<a href="#section/Pricing">See Pricing</a>)
      operationId: deleteCCProject
      parameters:
      - description: The ID of the project. Created and returned when a project is
          created.
        example: project_WDQskRIfHQxj53N5mk5K
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "429":
          description: Rate limited
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: |
        Delete a project
      tags:
      - CC Project
    get:
      description: |-
        Retrieve a project.

        `Cost: 0 Credit` (Free) (<a href="#section/Pricing">See Pricing</a>)
      operationId: getCCProject
      parameters:
      - description: The ID of the project. Created and returned when a project is
          created.
        example: project_WDQskRIfHQxj53N5mk5K
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CCProject'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "429":
          description: Rate limited
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: |
        Get a project
      tags:
      - CC Project
    put:
      description: |-
        Retrieve a project.

        `Cost: 0 Credit` (Free) (<a href="#section/Pricing">See Pricing</a>)
      operationId: updateCCProject
      parameters:
      - description: The ID of the project. Created and returned when a project is
          created.
        example: project_WDQskRIfHQxj53N5mk5K
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CCProject'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CCProject'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "429":
          description: Rate limited
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: |
        Update a project
      tags:
      - CC Project
  /checkout/v1/projects:
    get:
      description: |-
        List all projects associated with an account.

        `Cost: 0 Credit` (Free) (<a href="#section/Pricing">See Pricing</a>)
      operationId: listCCProjects
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CCProject'
                type: array
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "429":
          description: Rate limited
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: |
        List projects
      tags:
      - CC Project
  /checkout/v1/project/{project_id}/payment/{payment_identifier}:
    get:
      description: |-
        Retrieve a specific payment, either by its `payment_id` or `payment_validation_code`.

        `Cost: 0 Credit` (Free) (<a href="#section/Pricing">See Pricing</a>)
      operationId: getCCPayment
      parameters:
      - description: The ID of the project. Created and returned when a project is
          created.
        example: project_WDQskRIfHQxj53N5mk5K
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          type: string
        style: simple
      - description: |-
          You can supply either `payment_id` or `payment_validation_code`.

          The `payment_id` is only visible by you and uniquely identifies a payment.  The `payment_validation_code` is shown exclusively to the customer and the owner of the project. It can be used to redeem a payment. You can verify a payment by pulling the payment with the `payment_validation_code`.
        example:
        - payment_97jA1szpVjrSI5EvOb5zxNQFq5CfrC
        explode: false
        in: path
        name: payment_identifier
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CCPayment'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "429":
          description: Rate limited
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: |
        Get a payment
      tags:
      - CC Payment
  /checkout/v1/project/{project_id}/payments:
    get:
      description: |-
        List all payments associated with a project.

        `Cost: 0 Credit` (Free) (<a href="#section/Pricing">See Pricing</a>)
      operationId: listCCProjectPayments
      parameters:
      - description: The ID of the project. Created and returned when a project is
          created.
        example: project_WDQskRIfHQxj53N5mk5K
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          type: string
        style: simple
      - description: |
          Filter payments by a user's wallet identifier (i.e., Solana public key)
        explode: true
        in: query
        name: blockchain_identifier
        required: false
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CCPayment'
                type: array
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "429":
          description: Rate limited
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: |
        List a project's payments
      tags:
      - CC Payment
  /checkout/v1/payments:
    get:
      description: |-
        List all payments associated with your account (across all projects).

        `Cost: 0 Credit` (Free) (<a href="#section/Pricing">See Pricing</a>)
      operationId: listAllCCPayments
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CCPayment'
                type: array
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "429":
          description: Rate limited
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: "List all payments \n"
      tags:
      - CC Payment
  /webhook/v1/project/{project_id}/webhook/{webhook_identifier}:
    post:
      description: |-
        Retrieve the details of a webhook sent to you.

        `Cost: 0 Credit` (Free) (<a href="#section/Pricing">See Pricing</a>)
      operationId: getCCWebhook
      parameters:
      - description: The ID of the project. Created and returned when a project is
          created.
        example: project_WDQskRIfHQxj53N5mk5K
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the webhook. Created and returned when a webhook is
          sent.
        example: webhook/payment.received/payment_EyfDL6CsvFinpUnXgBXaUuqq3hCXa0
        explode: false
        in: path
        name: webhook_identifier
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CCWebhook'
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "429":
          description: Rate limited
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: |
        Get a webhook
      tags:
      - CC Webhook
  /webhook/v1/project/{project_id}/webhooks:
    post:
      description: |-
        List all webhooks sent to you and their respective responses from your server.

        `Cost: 0 Credit` (Free) (<a href="#section/Pricing">See Pricing</a>)
      operationId: listCCProjectWebhooks
      parameters:
      - description: The ID of the project. Created and returned when a project is
          created.
        example: project_WDQskRIfHQxj53N5mk5K
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CCWebhook'
                type: array
          description: Successful Response
        "400":
          description: Bad request (check response message)
        "401":
          description: Invalid API key pair in headers
        "429":
          description: Rate limited
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: |
        List project's webhooks
      tags:
      - CC Webhook
  /webhook/v1/project/{project_id}/webhook/{webhook_identifier}/validate:
    post:
      description: |-
        Validate whether a webhook you received was actually sent from us.

        `Cost: 0 Credit` (Free) (<a href="#section/Pricing">See Pricing</a>)
      operationId: validateCCWebhook
      parameters:
      - description: The ID of the project. Created and returned when a project is
          created.
        example: project_WDQskRIfHQxj53N5mk5K
        explode: false
        in: path
        name: project_id
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the webhook. Created and returned when a webhook is
          sent.
        example: webhook/payment.received/payment_EyfDL6CsvFinpUnXgBXaUuqq3hCXa0
        explode: false
        in: path
        name: webhook_identifier
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CCWebhookValidateRequest'
      responses:
        "200":
          description: Valid Webhook
        "400":
          description: Bad request / invalid webhook (check response message)
        "401":
          description: Invalid API key pair in headers
        "429":
          description: Rate limited
      security:
      - APIKeyID: []
        APISecretKey: []
      summary: |
        Validate a webhook
      tags:
      - CC Webhook
components:
  schemas:
    GenerateSeedPhraseRequest:
      example:
        n_words: 12
      properties:
        n_words:
          description: |
            The number of words to generate. Must be one of: 12, 15, 18, 21, or 24.
            Avalanche's default is 24. All other chains we support default to 12.
          example: 12
          type: number
    GeneralSecretPhrase:
      example:
        secret_recovery_phrase: fire owner display success half rescue pledge oval
          foam gossip window once
      properties:
        secret_recovery_phrase:
          description: "The 12, 15, 18, 21, or 24 word phrase that can be used to\
            \ derive many public key addresses (e.g., bottom army bless castle alter\
            \ habit dish embody child flame smooth zone).\n\nTo derive a wallet identifier\
            \ (e.g., public key, public address, etc.), you need a secret recovery\
            \ phrase, a derivation path, and an optional passphrase. \n\nAlternatively,\
            \ you can derive a wallet identifier with a private key.\n\nDefault Lengths:\n\
            - Avalanche (C): 24\n- Avalanche (X, P): 24\n- Binance: 12\n- Ethereum:\
            \ 12\n- Near: 12\n- Solana: 12\n\nYou can use `secret_recovery_phrase`\
            \ for Chains: `avalanche`, `binance`, `ethereum`, `near`, `solana`."
          type: string
    HexPrivateKey:
      example:
        hex_private_key: 0x200b9e5baa38b0dc7551645be11b394e9bf2b04532e4af8824bed2b3de2e0dc0
      properties:
        hex_private_key:
          description: |-
            A hex private key is the typical private key used on Ethereum, for example. It looks like this: `0x200b9e5baa38b0dc7551645be11b394e9bf2b04532e4af8824bed2b3de2e0dc0`.

            You can use `hex_private_key` for chains: `avalanche`, `binance_smart_chain`, `ethereum`.
          type: string
      required:
      - hex_private_key
    GeneralPrivateKey:
      example:
        private_key:
        - 185
        - 108
        - 153
        - 165
        - 57
        - 193
        - 166
        - 167
        - 58
        - 148
        - 133
        - 121
        - 92
        - 252
        - 242
        - 13
        - 233
        - 246
        - 35
        - 103
        - 185
        - 20
        - 27
        - 56
        - 111
        - 169
        - 12
        - 50
        - 50
        - 36
        - 83
        - 156
        - 173
        - 195
        - 143
        - 75
        - 135
        - 78
        - 204
        - 129
        - 217
        - 231
        - 58
        - 129
        - 69
        - 180
        - 185
        - 86
        - 119
        - 43
        - 200
        - 193
        - 94
        - 112
        - 31
        - 135
        - 68
        - 128
        - 207
        - 26
        - 85
        - 150
        - 68
        - 181
      properties:
        private_key:
          description: |-
            A private key corresponds to exactly one public key address. A private key can be used to move assets out of the wallet and sign transaction with the corresponding public key.

            A private key is an array of integers (e.g.,   `[185,108,153,165,57,193,166,167,58,148,133,121,92,252,242,13,233,246,35,103,185,20,27,56,111,169,12,50,50,36,83,156,173,195,143,75,135,78,204,129,217,231,58,129,69,180,185,86,119,43,200,193,94,112,31,135,68,128,207,26,85,150,68,181]`).

            <a href="https://solflare.com" target="_blank">Solflare</a> is a popular wallet interface on Solana that allows you to export your private key in this format.

            You can use `private_key` for Chains: `avalanche`, `binance_smart_chain`, `ethereum`, `solana`, `near`.
          type: object
      required:
      - private_key
    GeneralB58PrivateKey:
      example:
        b58_private_key: 4waBTVeAVWEAczSdx36uMrR19668ACgQDs7r386vrUes3UCzvXCQ2FPSCVGb1zJrwcULgpNzgABreyQaWSpGBwfx
      properties:
        b58_private_key:
          description: |-
            A private key corresponds to exactly one public key address. A private key can be used to move assets out of the wallet and sign transaction with the corresponding public key.

            A base58-encoded private key is a base58-encoded version of the typical private key. It is represented as a string (e.g., `4waBTVeAVWEAczSdx36uMrR19668ACgQDs7r386vrUes3UCzvXCQ2FPSCVGb1zJrwcULgpNzgABreyQaWSpGBwfx`).

            <a href="https://phantom.app" target="_blank">Phantom</a> is a popular wallet interface on Solana that allows you to export your private key in this format.

            You can use `b58_private_key` for Chains: `solana`, `near`
          type: string
      required:
      - b58_private_key
    GeneralGeneratePrivateKeyResponse:
      oneOf:
      - $ref: '#/components/schemas/HexPrivateKey'
      - $ref: '#/components/schemas/GeneralPrivateKey'
      - $ref: '#/components/schemas/GeneralB58PrivateKey'
    GeneralSecretRecoveryPhrase:
      example:
        secret_recovery_phrase: enter remember useful material soccer sense solution
          alarm crowd drift burst tattoo
        derivation_path: m/44/501/0/0
        passphrase: ""
      properties:
        secret_recovery_phrase:
          description: "The 12, 15, 18, 21, or 24 word phrase that can be used to\
            \ derive many public key addresses (e.g., bottom army bless castle alter\
            \ habit dish embody child flame smooth zone).\n\nTo derive a wallet identifier\
            \ (e.g., public key, public address, etc.), you need a secret recovery\
            \ phrase, a derivation path, and an optional passphrase. \n\nAlternatively,\
            \ you can derive a wallet identifier with a private key.\n\nDefault Lengths:\n\
            - Avalanche (C): 24\n- Avalanche (X, P): 24\n- Binance: 12\n- Ethereum:\
            \ 12\n- Near: 12\n- Solana: 12\n\nYou can use `secret_recovery_phrase`\
            \ for Chains: `avalanche`, `binance`, `ethereum`, `near`, `solana`."
          type: string
        derivation_path:
          description: |-
            Derivation paths are used to derive the wallet identifier from the secret recovery phrase. Only correctly typed paths are accepted.

            Defaults:
            - Avalanche (C): m/44'/60'/0'/0/0
            - Avalanche (X, P): m/44'/60'/0'/0/0
            - Binance: m/44'/60'/0'/0/0
            - Ethereum: m/44'/60'/0'/0/0
            - Near: m/44/397/0
            - Solana: m/44/501/0/0

            *Solana Behavior*

            If you provide the empty string "" as the value for the derivation path, then we will derive your public key with the same behavior as the default behavior of the Solana CLI.

            By default, we use "m/44/501/0/0". This is the path that the Phantom and Sollet wallets use.

            You can also arbitrarily increment the default path ("m/44/501/0/0") to generate more wallets (e.g., "m/44/501/0/1", "m/44/501/0/2", ... AND/OR "m/44/501/1/0", "m/44/501/2/0", ...).

            Phantom's Wallet increments the first digit (e.g., "m/44/501/0/0", "m/44/501/1/0", "m/44/501/2/0", ...) to generate more public key addresses.

            The SolFlare recommended path is "m/44/501/0".

            To learn more about derivation paths, check out <a href="https://learnmeabitcoin.com/technical/derivation-paths" target="_blank">this tutorial</a>.
          type: string
        passphrase:
          default: ""
          description: 'PASSPHRASE != PASSWORD. This is NOT your Phantom password
            or any other password. It is an optional string you use when creating
            a wallet. This provides an additional layer of security because a hacker
            would need both the secret recovery phrase and the passphrase to access
            the output public key. By default, most wallet UI extensions do not use
            a passphrase. (You probably did not use a passphrase.) Limited to 500
            characters. '
          type: string
      required:
      - secret_recovery_phrase
    GeneralWallet:
      description: |
        The wallet authentication information used to sign and submit the transaction.  Click the `>` arrow next to "wallet" on the left to see more details. See our Security section <a href="#section/Security">here</a>.
      oneOf:
      - $ref: '#/components/schemas/GeneralSecretRecoveryPhrase'
      - $ref: '#/components/schemas/HexPrivateKey'
      - $ref: '#/components/schemas/GeneralPrivateKey'
      - $ref: '#/components/schemas/GeneralB58PrivateKey'
    SupplyWalletRequest:
      example:
        wallet:
          secret_recovery_phrase: fire owner display success half rescue pledge oval
            foam gossip window once
          derivation_path: m/44/501/0/0
          passphrase: water
      properties:
        wallet:
          $ref: '#/components/schemas/GeneralWallet'
      required:
      - wallet
    AvalancheCChainPublicAddress:
      properties:
        hex_public_address:
          description: |
            The public address in hex form of the wallet. This is commonly used in Ethereum, Binance, and Avalanche C-Chain. (e.g., `0xB2b2d42C3adA171633E36b427F062f85A642F453`)
          example: 0xB2b2d42C3adA171633E36b427F062f85A642F453
          type: string
        hex_public_key:
          description: |
            To public key in hex form of the wallet. This is hashed to get the hex public address. (e.g., `0x0f7182c2c2f79aca13847bed68c67662c021df868ee5d20a78df6095e4cd162610c63ec9050989a3755a18255cdd707e50678bfd762db3f0feea647610e974c4`)
          example: 0x0f7182c2c2f79aca13847bed68c67662c021df868ee5d20a78df6095e4cd162610c63ec9050989a3755a18255cdd707e50678bfd762db3f0feea647610e974c4
          type: string
      type: object
    AvalancheXPChainPublicAddress:
      properties:
        bech_public_address:
          description: |
            The bech-32 encoded public address of the wallet, commonly used for the X and P chains of Avalanche. (e.g., `X-avax1rlxm7ygahlzfjgj4s965t0lk0ucm8v48rc9r5r`)
          example: X-avax1rlxm7ygahlzfjgj4s965t0lk0ucm8v48rc9r5r
          type: string
        hex_public_address:
          description: |
            The public address in hex form of the wallet. This is commonly used in Ethereum, Binance, and Avalanche C-Chain. (e.g., `0xB2b2d42C3adA171633E36b427F062f85A642F453`)
          example: 0xB2b2d42C3adA171633E36b427F062f85A642F453
          type: string
      type: object
    BSCPublicAddress:
      properties:
        hex_public_address:
          description: |
            The public address in hex form of the wallet. This is commonly used in Ethereum, Binance, and Avalanche C-Chain. (e.g., `0xB2b2d42C3adA171633E36b427F062f85A642F453`)
          example: 0xB2b2d42C3adA171633E36b427F062f85A642F453
          type: string
        hex_public_key:
          description: |
            To public key in hex form of the wallet. This is hashed to get the hex public address. (e.g, `0x0f7182c2c2f79aca13847bed68c67662c021df868ee5d20a78df6095e4cd162610c63ec9050989a3755a18255cdd707e50678bfd762db3f0feea647610e974c4`)
          example: 0x0f7182c2c2f79aca13847bed68c67662c021df868ee5d20a78df6095e4cd162610c63ec9050989a3755a18255cdd707e50678bfd762db3f0feea647610e974c4
          type: string
      type: object
    EthereumPublicAddress:
      properties:
        hex_public_address:
          description: |
            The public address in hex form of the wallet. This is commonly used in Ethereum, Binance, and Avalanche C-Chain. (e.g., `0xB2b2d42C3adA171633E36b427F062f85A642F453`)
          example: 0xB2b2d42C3adA171633E36b427F062f85A642F453
          type: string
        hex_public_key:
          description: |
            To public key in hex form of the wallet. This is hashed to get the hex public address. (e.g., `0x0f7182c2c2f79aca13847bed68c67662c021df868ee5d20a78df6095e4cd162610c63ec9050989a3755a18255cdd707e50678bfd762db3f0feea647610e974c4`)
          example: 0x0f7182c2c2f79aca13847bed68c67662c021df868ee5d20a78df6095e4cd162610c63ec9050989a3755a18255cdd707e50678bfd762db3f0feea647610e974c4
          type: string
      type: object
    NearPublicKey:
      properties:
        hex_public_key:
          description: |
            The public key in hex form. This is used in the Near blockchain. (e.g., `0xdf96e3094ab33558dbe14e743aceded3779307b931e12bd6f526fe450db70910`)
          example: 0xdf96e3094ab33558dbe14e743aceded3779307b931e12bd6f526fe450db70910
          type: string
        hex_public_address:
          description: |
            The public address in hex form of the wallet. This is commonly used in Ethereum, Binance, and Avalanche C-Chain. (e.g., `0xB2b2d42C3adA171633E36b427F062f85A642F453`)
          example: 0xB2b2d42C3adA171633E36b427F062f85A642F453
          type: string
        public_key:
          description: |
            The public key in base58 form. This is used in the Solana blockchain. (e.g., `3Gdu3Uf97jw4Kac8xHEm5Hqmob3BrvJhf3We8s9t5Q2c`)
          example: 3Gdu3Uf97jw4Kac8xHEm5Hqmob3BrvJhf3We8s9t5Q2c
          type: string
      type: object
    SolanaPublicKey:
      properties:
        public_key:
          description: |
            The public key in base58 form. This is used in the Solana blockchain. (e.g., `3Gdu3Uf97jw4Kac8xHEm5Hqmob3BrvJhf3We8s9t5Q2c`)
          example: 3Gdu3Uf97jw4Kac8xHEm5Hqmob3BrvJhf3We8s9t5Q2c
          type: string
        hex_public_key:
          description: |
            The public key in hex form. This is used in the Near blockchain. (e.g., `0xdf96e3094ab33558dbe14e743aceded3779307b931e12bd6f526fe450db70910`)
          example: 0xdf96e3094ab33558dbe14e743aceded3779307b931e12bd6f526fe450db70910
          type: string
        hex_public_address:
          description: |
            The public address in hex form of the wallet. This is commonly used in Ethereum, Binance, and Avalanche C-Chain. (e.g., `0xB2b2d42C3adA171633E36b427F062f85A642F453`)
          example: 0xB2b2d42C3adA171633E36b427F062f85A642F453
          type: string
      type: object
    WalletIdentifiers:
      description: |
        The wallet indentification information. Click the `>` arrow next to "wallet" on the left to see more details.
      oneOf:
      - $ref: '#/components/schemas/AvalancheCChainPublicAddress'
      - $ref: '#/components/schemas/AvalancheXPChainPublicAddress'
      - $ref: '#/components/schemas/BSCPublicAddress'
      - $ref: '#/components/schemas/EthereumPublicAddress'
      - $ref: '#/components/schemas/NearPublicKey'
      - $ref: '#/components/schemas/SolanaPublicKey'
    GeneralBalanceRequest:
      example:
        blockchain_identifier: GKNcUmNacSJo4S2Kq3DuYRYRGw3sNUfJ4tyqd198t6vQ
        network: mainnet-beta
        token_blockchain_identifier: EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v
      properties:
        blockchain_identifier:
          description: |-
            The address / public key of the wallet you're querying.

            Examples:
            - Solana: `GKNcUmNacSJo4S2Kq3DuYRYRGw3sNUfJ4tyqd198t6vQ`
            - Ethereum: `0xa84b9478d203cd25dF722e83C87590f8028f6aAA`
          type: string
        unit:
          description: "The `unit` parameter is only applicable if you are trying\
            \ to retrieve the balance of the native token (e.g., SOL, ETH, BNB). \n\
            \nApplicable units:\n- Solana: `lamport`, `sol` (1 SOL = 1e9 Lamports)\n\
            - Ethereum: `wei`, `gwei`, `eth`"
          type: string
        network:
          description: |-
            The network of the blockchain you selected

            - Solana: `devnet`, `mainnet-beta`
            - Ethereum: `ropsten`, `mainnet`

            Defaults when not provided (not applicable to path parameters):
            - Solana: `devnet`
            - Ethereum: `ropsten`
          type: string
        token_blockchain_identifier:
          default: "null"
          description: |-
            The `token_blockchain_identifier` identifies the token you wish to transfer.

            - If you're transferring a native blockchain currency (e.g., SOL, ETH, BNB), then simply do not supply this value.
            - If you're transfering an NFT, then supply the token address of the NFT. On Solana, this is the `mint_address` or `mint` (the address of the mint).
            - If you're transfering a token, supply the token address. For Solana, you can find on this on the Solana Explorer (e.g., see `SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt` for <a href="https://explorer.solana.com/address/SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt" target="_blank">Serum Token</a>) for the `token_address`.

            Examples:
            - Ethereum: `0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48`
            - Solana: `CK1LHEANTu7RFqN3XMzo2AnZhyus2W1vue1njrxLEM1d`
          type: string
      required:
      - public_key
      type: object
    GeneralBalanceResponse:
      example:
        balance: 3.322105
        decimals: 6
        integer_balance: 3322105
        network: mainnet-beta
      properties:
        balance:
          description: |
            The balance of the token in the wallet
          type: number
        integer_balance:
          description: |
            Not included if retreiving native token (e.g., SOL, ETH, BNB, etc.) balance
          type: number
        decimals:
          description: |
            Not included if retreiving native token (e.g., SOL, ETH, BNB, etc.) balance.
          type: number
        network:
          description: |-
            The network of the blockchain you selected

            - Solana: `devnet`, `mainnet-beta`
            - Ethereum: `ropsten`, `mainnet`

            Defaults when not provided (not applicable to path parameters):
            - Solana: `devnet`
            - Ethereum: `ropsten`
          type: string
        unit:
          description: |
            Not included if retreiving a token / NFT balance
          type: string
      required:
      - balance
      - network
    GeneralAirdropRequest:
      example:
        recipient_blockchain_identifier: GKNcUmNacSJo4S2Kq3DuYRYRGw3sNUfJ4tyqd198t6vQ
      properties:
        recipient_blockchain_identifier:
          description: |-
            The address/public key to which to send the airdrop.

            Examples:
            - Solana: `GKNcUmNacSJo4S2Kq3DuYRYRGw3sNUfJ4tyqd198t6vQ`
            - Ethereum: `0xa84b9478d203cd25dF722e83C87590f8028f6aAA`
          type: string
      required:
      - recipient_blockchain_identifier
      type: object
    SolanaTransactionMadeResponse:
      example:
        transaction_blockchain_identifier: 38jivwh89t38hkN4dS2M585NZFRHbsGfmnuFb2MVDwrfTXdvYBamQPRo7QQNGdx8mfYahfkUV6s822nH3K7ej5nj
        transaction_confirmed: true
      properties:
        transaction_blockchain_identifier:
          description: The identifier of the transaction
          type: string
        transaction_confirmed:
          description: Whether or not the transaction was confirmed
          type: boolean
      type: object
    EthereumTransactionMadeResponse:
      example:
        transaction_blockchain_identifier: 0x96130a1cad6bf919e7ef15a5fc5232f34f89f3c107acca3387f002e83c2142ca
        transaction_confirmed: true
      properties:
        transaction_blockchain_identifier:
          description: The identifier of the transaction
          type: string
        transaction_confirmed:
          description: Whether or not the transaction was confirmed
          type: boolean
      type: object
    GeneralTransactionMadeResponse:
      oneOf:
      - $ref: '#/components/schemas/SolanaTransactionMadeResponse'
      - $ref: '#/components/schemas/EthereumTransactionMadeResponse'
    GeneralFeePayerWallet:
      description: "This feature is only supported for `solana`.\n\nIf you do NOT\
        \ provide a wallet here, the fee payer of the transaction will be the `wallet`\
        \ you provide or the `sender_blockchain_identifier`.\n      \nIf you do provide\
        \ a wallet, then the `fee_payer_wallet` will pay the fees of the transaction\
        \ and any costs associated with creating a new associated token account (only\
        \ if necessary; approx. 0.002 SOL when necessary). A new account is necessary\
        \ if you are sending an NFT or SPL token to a user that has not received the\
        \ same NFT or one of the SPL tokens before (thus, a new associated token account\
        \ is needed)."
      oneOf:
      - $ref: '#/components/schemas/GeneralSecretRecoveryPhrase'
      - $ref: '#/components/schemas/HexPrivateKey'
      - $ref: '#/components/schemas/GeneralPrivateKey'
      - $ref: '#/components/schemas/GeneralB58PrivateKey'
    GeneralTransferRequest:
      example:
        wallet:
          secret_recovery_phrase: fire owner display success half rescue pledge oval
            foam gossip window once
        token_blockchain_identifier: CK1LHEANTu7RFqN3XMzo2AnZhyus2W1vue1njrxLEM1d
      properties:
        recipient_blockchain_identifier:
          description: |
            The blockchain identifier of the recipient to whom you want to send a token or NFT.

            On Ethereum, this is the hex public address of the recipient (e.g., `0x150865ca659204a9a0cd0da00296c6b5db441172`)

            On Solana, this is the public key of the recipient (e.g., `EW3nXn7X4NTWFKWaJgxKrFNoTSkop1cBUVHA21zrfF6u`).
          type: string
        wallet:
          $ref: '#/components/schemas/GeneralWallet'
        token_blockchain_identifier:
          description: |-
            The `token_blockchain_identifier` identifies the token you wish to transfer.

            - If you're transferring a native blockchain currency (e.g., SOL, ETH, BNB), then simply do not supply this value.
            - If you're transfering an NFT, then supply the token address of the NFT. On Solana, this is the `mint_address` or `mint` (the address of the mint).
            - If you're transfering a token, supply the token address. For Solana, you can find on this on the Solana Explorer (e.g., see `SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt` for <a href="https://explorer.solana.com/address/SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt" target="_blank">Serum Token</a>) for the `token_address`.

            Examples:
            - Ethereum: `0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48`
            - Solana: `CK1LHEANTu7RFqN3XMzo2AnZhyus2W1vue1njrxLEM1d`
          type: string
        network:
          description: |-
            The network of the blockchain you selected

            - Solana: `devnet`, `mainnet-beta`
            - Ethereum: `ropsten`, `mainnet`

            Defaults when not provided (not applicable to path parameters):
            - Solana: `devnet`
            - Ethereum: `ropsten`
          type: string
        amount:
          default: "1"
          description: "This value must be a string. What you provide here depends\
            \ on if you are sending an NFT, an SPL token, or SOL.\n\n- Native Currency\
            \ (e.g., SOL, ETH, BNB): Supply this value denominated in the native currency\
            \ (e.g., in SOL (but not in Lamports), or in ETH (but not in Wei)) in\
            \ a string format. This does not need to be an integer. For example, if\
            \ you want to send 0.0005 SOL, then `amount = \"0.0005\"`. If you want\
            \ to send 0.0005 ETH, then `amount = \"0.0005\"`.\n- NFT: This must be\
            \ `1`.\n- Token: This must be an integer in string format. To convert\
            \ from what you see on a wallet UI (e.g., 1 ATLAS, 1 USDC) to an integer\
            \ value, you have to multiply that value by 10^<i>x</i> where <i>x</i>\
            \ is the number of decimals. For example, to transfer 0.2 USDC, if USDC\
            \ uses 6 decimals, then the amount is 0.2 * 10^6 = 200000. \n  - For Solana,\
            \ you can get the number of decimals for a given SPL token <a href=\"\
            #operation/solanaGetSPLToken\">here</a>. We are working on analogues of\
            \ this endpoint for other blockchains."
          type: string
        return_compiled_transaction:
          default: false
          description: "- If `false`, we sign and submit the transaction (`wallet`\
            \ is required in this case; do not provide a value for `sender_blockchain_identifier`).\
            \ \n- If `true`, we compile the transaction (either `wallet` or `sender_blockchain_identifier`\
            \ is required in this case; do not provide both).\n  "
          type: boolean
        sender_blockchain_identifier:
          default: "null"
          description: "To understand the purpose of `sender_blockchain_identifier`\
            \ first note the following: There are two ways you can complete a transfer\
            \ transaction: \n- (1) we complete it for you with your `wallet` information\
            \ or \n- (2) we return the raw instruction data that you can sign and\
            \ submit yourself (no private keys required).\n\nWhen you provide your\
            \ `wallet` authentication, we are able to determine your wallet's blockchain\
            \ identifier (public key or address) which is the sender public key of\
            \ the transaction.\n\nWhen you are not providing your `wallet` as authentication,\
            \ we still need the `sender_blockchain_identifier` to be able to return\
            \ the compiled transaction. Thus, you provide `sender_blockchain_identifier`\
            \ if and only if you are not providing `wallet` authentication information\
            \ **and** you are returning a compiled transaction.\n\nYou will receive\
            \ an error if you provide both `wallet` and `sender_blockchain_identifier`.\
            \ You will receive an error if you provide neither `wallet` nor `sender_blockchain_identifier`."
          type: string
        fee_payer_wallet:
          $ref: '#/components/schemas/GeneralFeePayerWallet'
      required:
      - recipient_blockchain_identifier
      type: object
    SolanaTransactionCompiledResponse:
      example:
        b58_compiled_transaction: 7HigsMhUk7SN2cW3GaQsZ86WyVbR3id8xbPELatuhvXio3kYKbqj5jw3x69K2nxHx2murn56RpngeSsFVnmkhFp4oBk8jn5Frm7sAJBES1kxqxMMwaoTCTSM3ReMUDUQm1P7mbpqoBmaf9Z21pKEKA8dUMmatBG9PHjJf5CaL6Np7SFaMBnjeq8W8SAgWi24QMSr3sju4ZtMDqguZXWm6WESunwMengWE8HSLVfSLTEWYK6GS2QsR
        compiled_transaction:
        - 1
        - 1
        - 1
        - 4
        - 29
        - 205
        - 57
        - 150
        - 42
        - 213
        - 65
        - 12
        - 25
        - 150
        - 135
        - 62
        - 35
        - 196
        - 233
        - 175
        - 24
        - 155
        - 204
        - 168
        - 75
        - 12
        - 36
        - 253
        - 47
        - 241
        - 134
        - 90
        - 51
        - 130
        - 194
        - 136
        - 121
        - 239
        - 163
        - 213
        - 230
        - 16
        - 137
        - 176
        - 180
        - 69
        - 106
        - 51
        - 200
        - 194
        - 8
        - 119
        - 211
        - 158
        - 228
        - 142
        - 29
        - 64
        - 32
        - 220
        - 208
        - 35
        - 113
        - 150
        - 175
        - 122
        - 137
        - 8
        - 127
        - 136
        - 122
        - 194
        - 223
        - 10
        - 132
        - 244
        - 5
        - 186
        - 85
        - 172
        - 32
        - 234
        - 226
        - 128
        - 115
        - 127
        - 138
        - 169
        - 67
        - 227
        - 70
        - 170
        - 154
        - 79
        - 60
        - 157
        - 100
        - 207
        - 214
        - 209
        - 6
        - 221
        - 246
        - 225
        - 215
        - 101
        - 161
        - 147
        - 217
        - 203
        - 225
        - 70
        - 206
        - 235
        - 121
        - 172
        - 28
        - 180
        - 133
        - 237
        - 95
        - 91
        - 55
        - 145
        - 58
        - 140
        - 245
        - 133
        - 126
        - 255
        - 0
        - 169
        - 152
        - 93
        - 5
        - 155
        - 108
        - 35
        - 158
        - 6
        - 224
        - 54
        - 73
        - 165
        - 50
        - 99
        - 160
        - 15
        - 28
        - 214
        - 60
        - 127
        - 114
        - 136
        - 28
        - 105
        - 215
        - 227
        - 205
        - 16
        - 21
        - 39
        - 9
        - 227
        - 1
        - 3
        - 3
        - 1
        - 2
        - 0
        - 9
        - 3
        - 1
        - 0
        - 0
        - 0
        - 0
        - 0
        - 0
        - 0
      properties:
        b58_compiled_transaction:
          description: A base58 encoded byte array in string representation. Really
            easy to submit to Phantom. See <a href="https://github.com/BL0CK-X/blockchain-api/blob/main/examples/tutorials/phantom_tutorials/transfer_solana.html"
            target="_blank">here</a> for an example on how to submit it to a Phantom
            wallet for signing.
          type: string
        compiled_transaction:
          description: An array of integers representing the bytes of the transaction
          type: object
      type: object
    EthereumTransactionCompiledResponse:
      example:
        chain_id: 3
        data: 0xa9059cbb00000000000000000000000001df6f797cc34957c9764e0043aba35b073b9ae50000000000000000000000000000000000000000000000000000000000000001
        from: 0xa84b9478d203cd25dF722e83C87590f8028f6aAA
        to: 0x07865c6E87B9F70255377e024ace6630C1Eaa37F
        gas: 66115
        max_fee_per_gas: 1500000024
        max_priority_fee_per_gas: 1500000000
        nonce: 46
        value: 0
      properties:
        chain_id:
          description: |
            Indicates the chain that the transaction was compiled for (e.g., ropsten or mainnet).
          type: string
        data:
          description: |
            The transaction data
          type: string
        from:
          description: |
            The address expected to sign and submit the transaction
          type: string
        to:
          description: |
            The contract. This should match your provided value for `token_blockchain_identifier`.
          type: string
        gas:
          type: number
        max_fee_per_gas:
          type: number
        max_priority_fee_per_gas:
          type: number
        nonce:
          type: number
        value:
          type: number
      type: object
    GeneralTransactionResponse:
      oneOf:
      - $ref: '#/components/schemas/SolanaTransactionMadeResponse'
      - $ref: '#/components/schemas/SolanaTransactionCompiledResponse'
      - $ref: '#/components/schemas/EthereumTransactionMadeResponse'
      - $ref: '#/components/schemas/EthereumTransactionCompiledResponse'
    EthereumTransaction:
      example:
        access_list: []
        block_hash: 0x8d8880edf38aaf197c12418154e3ca8e0f41e68810f6c17e58b35e4cf107c1e7
        block_number: 0xe23e90
        chain_id: 0x1
        from: 0xd8da6bf26964af9d7eed9e03e53415d37aa96045
        gas: 0x18a78
        gas_price: 0x5eabd7e14
        hash: 0xc28efff0334292eaac09fa611eba7e721970eb7a7b7dc3dd411a521869ec9810
        input: 0x6a761202000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606ebc00000000000000000000000000000000000000000000000000000000000000044a9059cbb0000000000000000000000007364c516a0e6e784733e5700617ec99b174ffc710000000000000000000000000000000000000000000000000000000000989680000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000082cea0ebf9aa3df7daf8509150ff0366878a6110d1107858eec076d210d5ba45197845be2ce0b89444307bc85e16609bf3ef4adb1ea941ac4070f4be8b3c1018ce1c000000000000000000000000d8da6bf26964af9d7eed9e03e53415d37aa96045000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000
        max_fee_per_gas: 0x746a528800
        max_priority_fee_per_gas: 0x77359400
        nonce: 0x31f
        r: 0xc22d414961cfadb11943c16326b5e8bd29620ef5e764cfa8ef6f4a31509f9751
        s: 0x190e71ef0bcb26e01f982ded821aeec4ff5548a4edd4648a7336fb5e2ea06dec
        to: 0xa06c2b67e7435ce25a5969e49983ec3304d8e787
        transaction_index: 0x3b
        type: 0x2
        v: 0x0
        value: 0x0
      properties:
        access_list:
          type: object
        block_hash:
          type: string
        block_number:
          type: string
        chain_id:
          type: string
        from:
          type: string
        gas:
          type: string
        gas_price:
          type: string
        hash:
          type: string
        input:
          type: string
        max_fee_per_gas:
          type: string
        max_priority_fee_per_gas:
          type: string
        nonce:
          type: string
        r:
          type: string
        s:
          type: string
        to:
          type: string
        transaction_index:
          type: string
        type:
          type: string
        v:
          type: string
        value:
          type: string
      type: object
    SolanaTransaction:
      example:
        block_time: 1634782875
        meta:
          err: {}
          fee: 5000
          inner_instructions: []
          log_messages:
          - Program 11111111111111111111111111111111 invoke [1]
          - Program 11111111111111111111111111111111 success
          post_balances:
          - 1263499110
          - 10000000
          - 1
          post_token_balances: []
          pre_balances:
          - 1273504110
          - 0
          - 1
          pre_token_balances: []
          rewards: []
          status:
            _ok: {}
        slot: 102654672
        transaction:
          message: null
          account_keys:
          - pubkey:
              _bn: dee6a11fcc1dc31f0ed939f826fbade9c01c1a911e023cd6bd2cd9a089144a69
            signer: true
            writable: true
          - pubkey:
              _bn: 1dcd39962ad5410c1996873e23c4e9af189bcca84b0c24fd2ff1865a3382c288
            signer: false
            writable: true
          - pubkey:
              _bn: "00"
            signer: false
            writable: false
          instructions:
          - parsed:
              info:
                destination: 31LKs39pjT5oj6fWjC3F76dHWf9489asCthmgj8wu7pj
                lamports: 10000000
                source: G17UmNGnMJ851x3M1JXocgpft1afcYedjPuFpo1ohhCk
              type: transfer
            program: system
            program_id:
              _bn: "00"
          recent_blockhash: B4HW8uQT3VddawYKhsoHbhSYYARfWFCxJwaoAZBYBo1Y
          signatures:
          - 5MB3KY9Dps7Z9E9gJNykfaDHD8cwgxXhszxoeXEdcpUqsLm4BMjpwKWRKr4ojGg7s7wfpLwEPXLACZxhzAFBg4nz
      properties:
        block_time:
          type: number
        meta:
          type: object
        slot:
          type: number
        transaction:
          type: object
    GeneralTransaction:
      oneOf:
      - $ref: '#/components/schemas/EthereumTransaction'
      - $ref: '#/components/schemas/SolanaTransaction'
    InputName:
      example:
        name: vitalik.eth
      properties:
        name:
          type: string
      type: object
    InputBlockchainIdentifier:
      example:
        blockchain_identifier: 0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045
      properties:
        blockchain_identifier:
          type: string
      type: object
    TokenMetadataResponse:
      example:
        symbol: USDC
        name: USD Coin
        decimals: 9
        minter_blockchain_identifier: null
        total_supply: 1273041820
      properties:
        symbol:
          description: |
            The symbol of the coin
          type: string
        name:
          description: |
            The name of the coin
          type: string
        decimals:
          type: number
        minter_blockchain_identifier:
          description: |
            The `mint_authority` (Solana) or `master_minter` (Ethereum)
          type: string
        total_supply:
          type: string
      type: object
    Account:
      example:
        context:
          slot: 108532393
        value:
          data:
            parsed:
              info:
                decimals: 0
                freeze_authority: HATCV2FuPkoN4S5PQqjk8vz17FTH9XFu7hymkCJo483V
                is_initialized: true
                mint_authority: HATCV2FuPkoN4S5PQqjk8vz17FTH9XFu7hymkCJo483V
                supply: "1"
              type: mint
            program: spl-token
            space: 82
          executable: false
          lamports: 1461600
          owner: TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA
          rent_epoch: 250
      properties:
        context:
          $ref: '#/components/schemas/Account_context'
        value:
          $ref: '#/components/schemas/Account_value'
    AccountIsNFT:
      example:
        is_nft: true
      properties:
        is_nft:
          type: boolean
      required:
      - is_nft
      type: object
    AccountIsCandyMachine:
      example:
        is_candy_machine: true
        candy_machine_contract_version: v1
      properties:
        is_candy_machine:
          type: boolean
        candy_machine_contract_version:
          description: Whether or not this corresponds to candy machine v1, candy
            machine v2, or a Magic Eden candy machine.
          enum:
          - v1
          - v2
          - magic-eden-v1
          type: string
      required:
      - is_candy_machine
      type: object
    GetSPLTokenResponse:
      example:
        decimals: 6
        freeze_authority: 3sNBr7kMccME5D55xNgsmYpZnzPgP2g12CixAajXypn6
        is_initialized: true
        mint_authority: 2wmVCSfPxGPjrnMMn7rchp4uaeoTqN39mXFC2zhPdri9
        supply: "4785000018865782"
      properties:
        decimals:
          description: |
            The number of decimals of the token. For example, if the USDC token has 6 decimals, then you need 1 * 10e6 = 1,000,000 tokens to have 1 USDC. The purpose of this is that everything must be stored as  an integer. Thus, if there are $100 USDC in total, there must be $100 * 10e6 tokens in order for the $100 to be divisible into lower denominations than $1.
          type: number
        freeze_authority:
          description: Public key address
          type: string
        mint_authority:
          description: Public key address
          type: string
        is_initialized:
          type: boolean
        supply:
          description: The supply of the token
          type: string
    Transaction:
      example:
        id: 1
        jsonrpc: "2.0"
        result:
          block_time: 1634782875
          meta:
            err: {}
            fee: 5000
            inner_instructions: []
            log_messages:
            - Program 11111111111111111111111111111111 invoke [1]
            - Program 11111111111111111111111111111111 success
            post_balances:
            - 1263499110
            - 10000000
            - 1
            post_token_balances: []
            pre_balances:
            - 1273504110
            - 0
            - 1
            pre_token_balances: []
            rewards: []
            status:
              _ok: {}
          slot: 102654672
          transaction:
            message: null
            account_keys:
            - pubkey:
                _bn: dee6a11fcc1dc31f0ed939f826fbade9c01c1a911e023cd6bd2cd9a089144a69
              signer: true
              writable: true
            - pubkey:
                _bn: 1dcd39962ad5410c1996873e23c4e9af189bcca84b0c24fd2ff1865a3382c288
              signer: false
              writable: true
            - pubkey:
                _bn: "00"
              signer: false
              writable: false
            instructions:
            - parsed:
                info:
                  destination: 31LKs39pjT5oj6fWjC3F76dHWf9489asCthmgj8wu7pj
                  lamports: 10000000
                  source: G17UmNGnMJ851x3M1JXocgpft1afcYedjPuFpo1ohhCk
                type: transfer
              program: system
              program_id:
                _bn: "00"
            recent_blockhash: B4HW8uQT3VddawYKhsoHbhSYYARfWFCxJwaoAZBYBo1Y
            signatures:
            - 5MB3KY9Dps7Z9E9gJNykfaDHD8cwgxXhszxoeXEdcpUqsLm4BMjpwKWRKr4ojGg7s7wfpLwEPXLACZxhzAFBg4nz
      properties:
        id:
          type: number
        jsonrpc:
          type: string
        result:
          $ref: '#/components/schemas/Transaction_result'
    SecretPhrase:
      example:
        secret_recovery_phrase: fire owner display success half rescue pledge oval
          foam gossip window once
      properties:
        secret_recovery_phrase:
          description: "The twelve word phrase that can be used to derive many public\
            \ key addresses (e.g., bottom army bless castle alter habit dish embody\
            \ child flame smooth zone).\n\nTo derive a public key, you need a secret\
            \ recovery phrase, a derivation path, and an optional passphrase. \n\n\
            Alternatively, you can derive a public key with a private key."
          type: string
      title: The response when listing the API key pairs
    GeneratePrivateKey:
      example:
        b58_private_key: 5UNBwP7bYMRZZeT5sENFZFaTQxwPFFhLsCKZVgicNDpB6uceSAS1qtfzGfQmAmPzM7Nf8P3b3sk2QUntY7huHhqS
        private_key:
        - 223
        - 170
        - 179
        - 221
        - 165
        - 191
        - 167
        - 243
        - 159
        - 10
        - 84
        - 192
        - 72
        - 106
        - 183
        - 78
        - 172
        - 176
        - 186
        - 93
        - 40
        - 181
        - 198
        - 55
        - 109
        - 52
        - 203
        - 131
        - 83
        - 175
        - 183
        - 44
        - 75
        - 198
        - 179
        - 199
        - 37
        - 156
        - 85
        - 149
        - 181
        - 161
        - 239
        - 36
        - 185
        - 202
        - 86
        - 63
        - 51
        - 210
        - 41
        - 10
        - 34
        - 230
        - 176
        - 38
        - 153
        - 219
        - 197
        - 85
        - 2
        - 197
        - 167
        - 89
      properties:
        private_key:
          description: |-
            A private key corresponds to exactly one public key address. A private key can be used to move assets out of the wallet and sign transaction with the corresponding public key.

            A private key is an array of integers (e.g.,   `[185,108,153,165,57,193,166,167,58,148,133,121,92,252,242,13,233,246,35,103,185,20,27,56,111,169,12,50,50,36,83,156,173,195,143,75,135,78,204,129,217,231,58,129,69,180,185,86,119,43,200,193,94,112,31,135,68,128,207,26,85,150,68,181]`).

            <a href="https://solflare.com" target="_blank">Solflare</a> is a popular wallet interface on Solana that allows you to export your private key in this format.
          type: object
        b58_private_key:
          description: |-
            A private key corresponds to exactly one public key address. A private key can be used to move assets out of the wallet and sign transaction with the corresponding public key.

            A base58-encoded private key is a base58-encoded version of the typical private key. It is represented as a string (e.g., `4waBTVeAVWEAczSdx36uMrR19668ACgQDs7r386vrUes3UCzvXCQ2FPSCVGb1zJrwcULgpNzgABreyQaWSpGBwfx`).

            <a href="https://phantom.app" target="_blank">Phantom</a> is a popular wallet interface on Solana that allows you to export your private key in this format.
          type: string
    SecretRecoveryPhrase:
      example:
        secret_recovery_phrase: enter remember useful material soccer sense solution
          alarm crowd drift burst tattoo
        derivation_path: m/44/501/0/0
        passphrase: ""
      properties:
        secret_recovery_phrase:
          description: "The twelve word phrase that can be used to derive many public\
            \ key addresses (e.g., bottom army bless castle alter habit dish embody\
            \ child flame smooth zone).\n\nTo derive a public key, you need a secret\
            \ recovery phrase, a derivation path, and an optional passphrase. \n\n\
            Alternatively, you can derive a public key with a private key."
          type: string
        derivation_path:
          default: m/44/501/0/0
          description: |-
            Derivation paths are used to derive the public key from the secret recovery phrase. Only certain paths are accepted.

            If you provide the empty string "" as the value for the derivation path, then we will derive your public key with the same behavior as the default behavior of the Solana CLI.

            By default, we use "m/44/501/0/0". This is the path that the Phantom and Sollet wallets use.

            You can also arbitrarily increment the default path ("m/44/501/0/0") to generate more wallets (e.g., "m/44/501/0/1", "m/44/501/0/2", ... AND/OR "m/44/501/1/0", "m/44/501/2/0", ...).

            Phantom's Wallet increments the first digit (e.g., "m/44/501/0/0", "m/44/501/1/0", "m/44/501/2/0", ...) to generate more public key addresses.

            The SolFlare recommended path is "m/44/501/0".

            To learn more about derivation paths, check out <a href="https://learnmeabitcoin.com/technical/derivation-paths" target="_blank">this tutorial</a>.
          type: string
        passphrase:
          default: ""
          description: 'PASSPHRASE != PASSWORD. This is NOT your Phantom password
            or any other password. It is an optional string you use when creating
            a wallet. This provides an additional layer of security because a hacker
            would need both the secret recovery phrase and the passphrase to access
            the output public key. By default, most wallet UI extensions do not use
            a passphrase. (You probably did not use a passphrase.) Limited to 500
            characters. '
          type: string
      required:
      - secret_recovery_phrase
    PrivateKey:
      properties:
        private_key:
          description: |-
            A private key corresponds to exactly one public key address. A private key can be used to move assets out of the wallet and sign transaction with the corresponding public key.

            A private key is an array of integers (e.g.,   `[185,108,153,165,57,193,166,167,58,148,133,121,92,252,242,13,233,246,35,103,185,20,27,56,111,169,12,50,50,36,83,156,173,195,143,75,135,78,204,129,217,231,58,129,69,180,185,86,119,43,200,193,94,112,31,135,68,128,207,26,85,150,68,181]`).

            <a href="https://solflare.com" target="_blank">Solflare</a> is a popular wallet interface on Solana that allows you to export your private key in this format.
          type: object
      required:
      - private_key
    B58PrivateKey:
      properties:
        b58_private_key:
          description: |-
            A private key corresponds to exactly one public key address. A private key can be used to move assets out of the wallet and sign transaction with the corresponding public key.

            A base58-encoded private key is a base58-encoded version of the typical private key. It is represented as a string (e.g., `4waBTVeAVWEAczSdx36uMrR19668ACgQDs7r386vrUes3UCzvXCQ2FPSCVGb1zJrwcULgpNzgABreyQaWSpGBwfx`).

            <a href="https://phantom.app" target="_blank">Phantom</a> is a popular wallet interface on Solana that allows you to export your private key in this format.
          type: string
      required:
      - b58_private_key
    Wallet:
      description: |
        The wallet authentication information used to sign and submit the transaction.  Click the `>` arrow next to "wallet" on the left to see more details. See our Security section <a href="#section/Security">here</a>.
      oneOf:
      - $ref: '#/components/schemas/SecretRecoveryPhrase'
      - $ref: '#/components/schemas/PrivateKey'
      - $ref: '#/components/schemas/B58PrivateKey'
    GetPublicKeyRequest:
      example:
        wallet:
          secret_recovery_phrase: fire owner display success half rescue pledge oval
            foam gossip window once
          derivation_path: m/44/501/0/0
          passphrase: water
      properties:
        wallet:
          $ref: '#/components/schemas/Wallet'
      required:
      - wallet
    PublicKey:
      example:
        public_key: GoUhxkKRiy8psWcr1csF1mbuDsfNd28JZXNHMQ5BSBnc
      properties:
        public_key:
          type: string
      required:
      - public_key
      type: object
    FeePayerWallet:
      description: "If you do NOT provide a wallet here, the fee payer of the transaction\
        \ will be the `wallet` you provide or the `sender_public_key`.\n      \nIf\
        \ you do provide a wallet, then the `fee_payer_wallet` will pay the fees of\
        \ the transaction and any costs associated with creating a new associated\
        \ token account (only if necessary; approx. 0.002 SOL when necessary). A new\
        \ account is necessary if you are sending an NFT or SPL token to a user that\
        \ has not received the same NFT or one of the SPL tokens before (thus, a new\
        \ associated token account is needed)."
      oneOf:
      - $ref: '#/components/schemas/SecretRecoveryPhrase'
      - $ref: '#/components/schemas/PrivateKey'
      - $ref: '#/components/schemas/B58PrivateKey'
    TransferRequest:
      example:
        wallet:
          secret_recovery_phrase: fire owner display success half rescue pledge oval
            foam gossip window once
        token_address: CK1LHEANTu7RFqN3XMzo2AnZhyus2W1vue1njrxLEM1d
      properties:
        wait_for_confirmation:
          default: true
          description: |
            Whether to wait for the transaction to be confirmed on the blockchain or simply be processed.  Processed means that our node has picked up the transaction request, but not that it was confirmed by the Solana cluster.  Confirmed means that the cluster voted on your transaction and approved it. To be completely sure that the transaction succeeded, you can either set `wait_for_confirmation=True` (call takes 20 seconds with True; about 4 seconds for processed) or you can [get the transaction metadata](/#tag/Solana-Transaction/operation/solanaGetTransaction) using the signature in the response returned. Once it returns the metadata, then the transaction should have succeeded.
          type: boolean
        recipient_address:
          description: The public key address of the recipient to whom you want to
            send a token or NFT
          type: string
        wallet:
          $ref: '#/components/schemas/Wallet'
        token_address:
          description: |
            If you're transfering an NFT, supply the `mint` (the address of the mint) for the `token_address`. If you're transfering a token, supply the token address found on the explorer (e.g., see `SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt` for <a href="https://explorer.solana.com/address/SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt" target="_blank">Serum Token</a>) for the `token_address`. If you're transferring SOL, do not supply a value for `token_address`.
          type: string
        network:
          default: devnet
          enum:
          - devnet
          - mainnet-beta
          type: string
        amount:
          default: "1"
          description: |-
            This value must be a string. What you provide here depends on if you are sending an NFT, an SPL token, or SOL.

            - NFT: This must be '1'.
            - SPL Token: This must be an integer in string format. To convert from what you see on a wallet UI (e.g., 1 ATLAS, 1 USDC) to an integer value, you have to multiply that value by 10^<i>x</i> where <i>x</i> is the number of decimals. For example, to transfer 0.2 USDC, if USDC uses 6 decimals, then the amount is 0.2 * 10^6 = 200000. You can get the number of decimals for a given SPL token <a href="#operation/solanaGetSPLToken">here</a>.
            - SOL: Supply this value denominated in SOL in a string format. This does not need to be an integer. For example, if you want to send 0.0005 SOL, then amount = "0.0005".
          type: string
        return_compiled_transaction:
          default: false
          description: |
            If `false`, we sign and submit the transaction (`wallet` is required in this case; do not provide a value for `sender_public_key`).  If `true`, we compile the transaction (either `wallet` or `sender_public_key` is required in this case; do not provide both).
          type: boolean
        sender_public_key:
          default: "null"
          description: |
            To understand the purpose of `sender_public_key` first note the following: There are two ways you can complete a transfer transaction: (1) we complete it for you with your `wallet` information or (2) we return the raw instruction data that you can sign and submit yourself (no private keys required).
            When you provide your `wallet` authentication, we are able to determine your wallet's public key, which is the sender public key of the transaction.
            When you are not providing your `wallet` as authentication, we still need the `sender_public_key` to be able to return the compiled transaction. Thus, you provide `sender_public_key` only if you are not providing `wallet` authentication information and you are returning a compiled transaction.
            You will receive an error if you provide both `wallet` and `sender_public_key`. You will receive an error if you provide neither `wallet` nor `sender_public_key`.
          type: string
        fee_payer_wallet:
          $ref: '#/components/schemas/FeePayerWallet'
      required:
      - recipient_address
      type: object
    TransferResponse:
      example:
        transaction_signature: 38jivwh89t38hkN4dS2M585NZFRHbsGfmnuFb2MVDwrfTXdvYBamQPRo7QQNGdx8mfYahfkUV6s822nH3K7ej5nj
        confirmed: true
      properties:
        transaction_signature:
          description: The signature of the transaction
          type: string
        confirmed:
          description: Whether or not the transaction was confirmed or simply submitted
            for processing. The status depends on your input for `wait_for_confirmation`.
            This only is returned when you are submitting a transaction, not when
            retrieving signatures for a public key, for example.
          type: boolean
      type: object
    TransferResponseCompiled:
      example:
        b58_compiled_transaction: 7HigsMhUk7SN2cW3GaQsZ86WyVbR3id8xbPELatuhvXio3kYKbqj5jw3x69K2nxHx2murn56RpngeSsFVnmkhFp4oBk8jn5Frm7sAJBES1kxqxMMwaoTCTSM3ReMUDUQm1P7mbpqoBmaf9Z21pKEKA8dUMmatBG9PHjJf5CaL6Np7SFaMBnjeq8W8SAgWi24QMSr3sju4ZtMDqguZXWm6WESunwMengWE8HSLVfSLTEWYK6GS2QsR
        compiled_transaction:
        - 1
        - 1
        - 1
        - 4
        - 29
        - 205
        - 57
        - 150
        - 42
        - 213
        - 65
        - 12
        - 25
        - 150
        - 135
        - 62
        - 35
        - 196
        - 233
        - 175
        - 24
        - 155
        - 204
        - 168
        - 75
        - 12
        - 36
        - 253
        - 47
        - 241
        - 134
        - 90
        - 51
        - 130
        - 194
        - 136
        - 121
        - 239
        - 163
        - 213
        - 230
        - 16
        - 137
        - 176
        - 180
        - 69
        - 106
        - 51
        - 200
        - 194
        - 8
        - 119
        - 211
        - 158
        - 228
        - 142
        - 29
        - 64
        - 32
        - 220
        - 208
        - 35
        - 113
        - 150
        - 175
        - 122
        - 137
        - 8
        - 127
        - 136
        - 122
        - 194
        - 223
        - 10
        - 132
        - 244
        - 5
        - 186
        - 85
        - 172
        - 32
        - 234
        - 226
        - 128
        - 115
        - 127
        - 138
        - 169
        - 67
        - 227
        - 70
        - 170
        - 154
        - 79
        - 60
        - 157
        - 100
        - 207
        - 214
        - 209
        - 6
        - 221
        - 246
        - 225
        - 215
        - 101
        - 161
        - 147
        - 217
        - 203
        - 225
        - 70
        - 206
        - 235
        - 121
        - 172
        - 28
        - 180
        - 133
        - 237
        - 95
        - 91
        - 55
        - 145
        - 58
        - 140
        - 245
        - 133
        - 126
        - 255
        - 0
        - 169
        - 152
        - 93
        - 5
        - 155
        - 108
        - 35
        - 158
        - 6
        - 224
        - 54
        - 73
        - 165
        - 50
        - 99
        - 160
        - 15
        - 28
        - 214
        - 60
        - 127
        - 114
        - 136
        - 28
        - 105
        - 215
        - 227
        - 205
        - 16
        - 21
        - 39
        - 9
        - 227
        - 1
        - 3
        - 3
        - 1
        - 2
        - 0
        - 9
        - 3
        - 1
        - 0
        - 0
        - 0
        - 0
        - 0
        - 0
        - 0
      properties:
        b58_compiled_transaction:
          description: A base58 encoded byte array in string representation. Really
            easy to submit to Phantom. See <a href="https://github.com/BL0CK-X/blockchain-api/blob/main/examples/tutorials/phantom_tutorials/transfer_solana.html"
            target="_blank">here</a> for an example on how to submit it to a Phantom
            wallet for signing.
          type: string
        compiled_transaction:
          description: An array of integers representing the bytes of the transaction
          type: object
      type: object
    DoubleTransferResponse:
      oneOf:
      - $ref: '#/components/schemas/TransferResponse'
      - $ref: '#/components/schemas/TransferResponseCompiled'
    ATAResponse:
      example:
        associated_token_address: CnW7tnQrfbSMkHYpvn5mtYw11qGpat6WM87D68cNT2hC
      properties:
        associated_token_address:
          description: The associated token address
          type: string
      required:
      - associated_token_address
      type: object
    AirdropRequest:
      example:
        recipient_address: recipient_address
      properties:
        recipient_address:
          description: The address to which to send the airdrop of 0.015 SOL
          type: string
      required:
      - recipient_address
      type: object
    BalanceRequest:
      example:
        public_key: GKNcUmNacSJo4S2Kq3DuYRYRGw3sNUfJ4tyqd198t6vQ
        network: mainnet-beta
        mint_address: EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v
      properties:
        public_key:
          description: The public key address of the wallet
          type: string
        unit:
          default: lamport
          description: If you are retrieving the SOL balance, you can select whether
            to retrieve this in SOL or Lamport units (1 SOL = 1e9 Lamports).
          enum:
          - lamport
          - sol
          type: string
        network:
          default: devnet
          enum:
          - devnet
          - mainnet-beta
          type: string
        mint_address:
          default: "null"
          description: |-
            The mint address of the SPL token or NFT. If not provided, the balance returned is in SOL. Make sure to use the correct network.

            You can see the mint addresses of popular SPL tokens <a href="https://raw.githubusercontent.com/solana-labs/token-list/main/src/tokens/solana.tokenlist.json" target="_blank">here</a>.

            Some example mint addresses of SPL tokens:
            - USDC: EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v
            - Mango: MangoCzJ36AjZyKwVj3VnYU4GTonjfVEnJmvvWaxLac
            - Serum: SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt
            - Raydium: 4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R
            - wSOL: So11111111111111111111111111111111111111112
            - ATLAS: ATLASXmbPQxBUYbxPsV97usA3fPQYEqzQBUHgiFCUsXx
          type: string
      required:
      - public_key
      type: object
    BalanceResponse:
      example:
        balance: 3.322105
        decimals: 6
        integer_balance: 3322105
        network: mainnet-beta
      properties:
        balance:
          description: The balance of the token in the wallet
          type: number
        integer_balance:
          description: Not included if retreiving SOL balance
          type: number
        decimals:
          description: Not included if retreiving SOL balance. Sometimes not included
            if the balance of the token is '0'.
          type: number
        network:
          enum:
          - devnet
          - mainnet-beta
          type: string
        unit:
          description: Not included if retreiving an SPL token/NFT balance
          enum:
          - lamport
          - sol
          type: string
      required:
      - balance
      - network
    ListTokensResponse:
      description: A list the wallet's of token positions
      example:
      - amount: "125000000000"
        decimals: 9
        mint_address: 4UuGQgkD3rSeoXatXRWwRfRd21G87d5LiCfkVzNNv1Tt
        token_address: 5mSHqsF7hdQMRsnADXFy2m39G2oNHQEBLg1dFhCrTqe8
        ui_amount: 125
      - amount: "10090000000000000000"
        decimals: 9
        mint_address: 5jv9QU2SHehzt1Rya7hi8eEdoBMX6a98uWjXFSwWXspT
        token_address: EASFLGGD8ZCwB2nux8WZtnRGF85eC3kETa81SYB5K6gW
        ui_amount: 10090000000
      - amount: "3"
        decimals: 0
        mint_address: FRbqQnbuLoMbUG4gtQMeULgCDHyY6YWF9NRUuLa98qmq
        token_address: 3tTXfF2GWxDFnvueTFMbBagtcgzXgX9cuc8QcASFD3j8
        ui_amount: 3
      - amount: "5000"
        decimals: 0
        mint_address: H32T9DYWTt83n9iRFyrq9TEGa3LUDFgWnFKrMvYS4JUf
        token_address: Zd23L1RCzKApSzyLhwMZeZ5ASokgbthQhyQ5QFG7U74
        ui_amount: 5000
      - amount: "3322105"
        decimals: 6
        mint_address: EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v
        token_address: 29TwF9mm2ZfrcjRiV3PCRQmgYzL95HJJhaUairYmWLJC
        ui_amount: 3.322105
      - amount: "46"
        decimals': 6
        mint_address: MangoCzJ36AjZyKwVj3VnYU4GTonjfVEnJmvvWaxLac
        token_address: GizuDGzHpZFFJTjRKG57LFmzb5AooBiceugbmDPgsb5S
        ui_amount: 4.6E-5
      items:
        properties:
          amount:
            description: The balance. To get the balance without decimals, divide
              by 10^x where x = the number of decimals
            type: string
          decimals:
            type: number
          mint_address:
            description: The mint address of the SPL token
            type: string
          token_address:
            description: The token address
            type: string
          ui_amount:
            description: The amount to display (the actual balance divided by 10^x,
              where x = the number of decimals)
            type: string
        type: object
      type: array
    ListTransactionsResponse:
      description: A list the wallet's of token positions
      example:
      - jLmcxEjRppamX1b98PRUN1Sutmqn6HD1HugP5VPoib7AruFC2D5pyh7UPHZ9FUBww6Q5SRagoqjQTG51tcGtDDW
      - 5QEdoVR7u5dPLs8A2GLpF2F4f8rYKqJwZjAFsgNRPdgsfDuo1gRBQwCQPqpZk5aYM7eSg1uuq8cdmH5bH68GrFJ5
      - 5mdZKo9tsJijncaiVmxqVfg7PUUpk5pHebyp9ZcM53kb4RWnBqnCX18GvoQhEsYywhFkHzrXZEQksLuWhvgso4HJ
      - 2DzKmgTFZGH1aFue8wproBNZ3WGULxV6MaK9zTMZjbnL8hv3gKQ9fjpQAFAQXWeryYtgnTUfha3v4dfwMcpRcD6U
      - vo19EnE97N2yhxwZaDSQjZFNsft7LxPBhbLeRnoVBGTam9SP91hWpBDvQ6oStkEhgXAvKDdz3poUCypU4jmpkFs
      - 22D1YEiLn8oArCLWU23hDtRk4kbZmSUQkHwXk88eDrKLYkx5zWCeDZ8UadLaa1AMkwy6jNHiDo4mVRfqX4nmUrB3
      - 3R6QjGex1TRhs62pvU78Ccg5gSNCox5K7qxemKM3zaxGWzkfJ7DoWwW4YzjSrh7ZDCxRjm9AXbfvu8Pj9w3Bs2SH
      items:
        description: |
          The signature for the transaction. You can call `solanaGetTransaction` to get more details: https://docs.blockchainapi.com/#operation/solanaGetTransaction
        type: string
      type: array
    NFT:
      example:
        confirmed: true
        data:
          creators:
          - HuAiZg55P557gdjr5jkq79YdMe9sbdHuPj5UN21XuSyK
          - 5FzddvKbxE54KEg2WoeNiGWJYAUBabKVFg2MVCSacWiJ
          name: 'Vox Punks Club #966'
          seller_fee_basis_points: 500
          share:
          - 0
          - 100
          symbol: ""
          uri: https://arweave.net/_Y8tETU3FbAFZSM1wXNeWPweWwrW9K6oSF1SYi_bH9A
          verified:
          - 1
          - 1
        is_mutable: true
        mint: EEr5yQpNXf7Bru6Rt5podx56HGW9CEehXqgRGh2wa71w
        primary_sale_happened: true
        update_authority: 5FzddvKbxE54KEg2WoeNiGWJYAUBabKVFg2MVCSacWiJ
        metadata_account: HTu4wUU4WxL48AdQM3nQuHeY8iAqgV9aKwbes4P6Y1c4
        edition_nonce: 255
        token_standard: 0
        collection:
          verified: 0
          key: "11111111111111111111111111111111"
        uses: 0
      properties:
        confirmed:
          description: Whether or not the NFT mint was confirmed or simply submitted
            for processing. The status depends on your input for `wait_for_confirmation`.
            This only is returned when you are minting an NFT, not when searching
            or retrieving the metadata.
          type: boolean
        data:
          $ref: '#/components/schemas/NFT_data'
        is_mutable:
          type: boolean
        mint:
          description: |
            The public key address of the NFT
          type: string
        primary_sale_happened:
          type: boolean
        update_authority:
          description: |
            A public key address that is usually that of the person who minted the NFT
          type: string
        seller_fee_basis_points:
          type: number
        mint_secret_recovery_phrase:
          type: string
        explorer_url:
          type: string
        metadata_account:
          description: |
            The metadata account of the NFT
          type: string
        edition_nonce:
          type: number
        token_standard:
          type: number
        collection:
          $ref: '#/components/schemas/NFT_collection'
        uses:
          type: number
      type: object
    ListNFTsResponse:
      example:
        nfts_owned:
        - 9ztsoyPz96SDUUfX4yh1QnxN9Yv2TAAKcY2dUuYcgtsv
        - 5z2JAGTCDJ4KpzBDoFrapWGWcwKAjoZ2rkNqi5bvt9C3
        nfts_metadata:
        - data:
            creators:
            - 6NTtQY7ErW6tQVYGt6cpbcw3g7JwGrVSWmkMAJva8nM3
            - GKCE4m2Bten4ygPAn4hNJGsFhkn1hiTFj7fEFMcbDPbP
            name: 'Mechanic Wolf #1331'
            seller_fee_basis_points: 600
            share:
            - 0
            - 100
            symbol: MCW
            uri: https://arweave.net/Y1t2iok4cPcY5_vPbwkmPQwkkqWdwcusGK13eHttF6U
            verified':
            - 1
            - 0
          explorer_url: https://explorer.solana.com/address/9ztsoyPz96SDUUfX4yh1QnxN9Yv2TAAKcY2dUuYcgtsv
          is_mutable: true
          mint: 9ztsoyPz96SDUUfX4yh1QnxN9Yv2TAAKcY2dUuYcgtsv
          primary_sale_happened: true
          update_authority': GKCE4m2Bten4ygPAn4hNJGsFhkn1hiTFj7fEFMcbDPbP
        - data:
            creators:
            - 7xRUqdB8WHiqMtXQm5eSNk4sM5nPhm68LJiC33Hr73vE
            - HtpFSATcbbdGkDFXiExJtxBG1K1BpLrUVoxzSEwxuPgw
            name: 'Millionaire Ape #647'
            seller_fee_basis_points: 750
            share:
            - 0
            - 100
            symbol: YC
            uri: https://arweave.net/Zp3CwpG_gu_FnShbMJ4gjSh9OKrOSpw-TuYl3lSTwzE
            verified:
            - 1
            - 0
          explorer_url: https://explorer.solana.com/address/5z2JAGTCDJ4KpzBDoFrapWGWcwKAjoZ2rkNqi5bvt9C3
          is_mutable: true
          mint: 5z2JAGTCDJ4KpzBDoFrapWGWcwKAjoZ2rkNqi5bvt9C3
          primary_sale_happened: true
          update_authority: HtpFSATcbbdGkDFXiExJtxBG1K1BpLrUVoxzSEwxuPgw
      properties:
        nfts_owned:
          description: A list of mint addresses represented by a string
          items:
            description: A mint address
            type: string
          type: array
        nfts_metadata:
          description: A list of the dictionaries, where each dictionary is an NFT's
            metadata
          items:
            $ref: '#/components/schemas/NFT'
          type: array
      type: object
    NFTMintRequest:
      example:
        wait_for_confirmation: true
        wallet:
          secret_recovery_phrase: fire owner display success half rescue pledge oval
            foam gossip window once
        return_compiled_transaction: false
        name: Super Musk
        symbol: MUSK
        description: Buy this image of Super Musk!
        image_url: https://static01.nyt.com/images/2021/03/11/business/00china-musk/00china-musk-superJumbo.jpg
        uri_metadata:
          animation_url: https://www.arweave.net/efgh1234?ext=mp4
          attributes:
          - trait_type: is_curious
            value: "true"
          - trait_type: name
            value: george
        upload_method: S3
        is_mutable: true
        is_master_edition: true
        seller_fee_basis_points: 100
        creators:
        - 31LKs39pjT5oj6fWjC3F76dHWf9489asCthmgj8wu7pj
        - G17UmNGnMJ851x3M1JXocgpft1afcYedjPuFpo1ohhCk
        share:
        - 40
        - 60
        network: devnet
      properties:
        wait_for_confirmation:
          default: true
          description: "Whether to wait for the NFT mint to be confirmed on the blockchain\
            \ or simply be processed.  Processed means that our node has picked up\
            \ the transaction request, but not that it was confirmed by the Solana\
            \ cluster. \n Confirmed means that the cluster voted on your transaction\
            \ and approved it.\nTo be completely sure that the NFT was minted, you\
            \ can either set `wait_for_confirmation=True` (call takes 20 seconds with\
            \ True; about 4 seconds for processed) or you can [get the metadata](/#tag/Solana-NFT/operation/solanaGetNFT)\
            \ from the mint returned. Once it returns the NFT metadata, then the NFT\
            \ should have been successfully minted.\n"
          type: boolean
        wallet:
          $ref: '#/components/schemas/Wallet'
        name:
          default: ""
          description: The name of the token. Limited to 32 characters. Stored on
            the blockchain.
          type: string
        symbol:
          default: ""
          description: The symbol of the token. Limited to 10 characters. Stored on
            the blockchain.
          type: string
        description:
          default: ""
          description: "The description of the NFT. Limited to 2000 characters. Not\
            \ stored on the blockchain. \n      \nIf you are providing your own `uri`\
            \ (see above), then you do not need to provide this.\n\nIf you are not\
            \ providing your own `uri` and you do not provide this, then there wills\
            \ simply be no description.\n\nOnly provide a value for `description`\
            \ if the `upload_method` is set to `S3` (see the description for `upload_method`\
            \ above)."
          type: string
        upload_method:
          default: S3
          description: "When you choose `S3`, all of the `name`, `description`, `symbol`,\
            \ `uri_metadata`, and `image_url` are put into a JSON dictionary and uploaded\
            \ to S3 as a JSON file.\n\nThis is uploaded to an AWS S3 bucket we own,\
            \ and is an option we provide at no charge. The S3 link to this file is\
            \ stored in the NFT's account on the blockchain. Learn more  <a href=\"\
            https://blockchainapi.com/2022/01/18/how-to-format-off-chain-nft-metadata.html\"\
            \ target=\"_blank\">here</a>.\n\nWhen you choose `URI`, the `uri` you\
            \ provide is stored on the blockchain, and the `uri_metadata`, `description`,\
            \ and `image_url` are ignored and not stored anywhere. `S3` is NOT involved\
            \ in this case. \n\nAn example of a `uri` you would provide is an Arweave\
            \ URL, like this: `https://arweave.net/_Y8tETU3FbAFZSM1wXNeWPweWwrW9K6oSF1SYi_bH9A`."
          enum:
          - S3
          - URI
          type: string
        uri:
          default: ""
          description: "The `uri` you provide is stored on the blockchain, and the\
            \ `uri_metadata`, `description`, and `image_url` are ignored and not stored\
            \ anywhere. `S3` is NOT involved in this case. \n\nRead more <a href=\"\
            https://blockchainapi.com/2022/01/18/how-to-format-off-chain-nft-metadata.html\"\
            \ target=\"_blank\">here</a>.\n\nAn example of a `uri` you would provide\
            \ is an Arweave URL, like this: `https://arweave.net/_Y8tETU3FbAFZSM1wXNeWPweWwrW9K6oSF1SYi_bH9A`.\n\
            \nOnly provide a value for `uri` if the `upload_method` is set to `URI`\
            \ (see the description for `upload_method` above)."
          type: string
        image_url:
          default: ""
          description: "The URL of the image of the NFT. \n      \nIf you are providing\
            \ your own `uri` (see above), then you do not need to provide this.\n\n\
            If you are not providing your own `uri` and you do not provide this, then\
            \ there wills simply be no image.\n\nOnly provide a value for `image_url`\
            \ if the `upload_method` is set to `S3` (see the description for `upload_method`\
            \ above)."
          type: string
        uri_metadata:
          default: {}
          description: "The off-chain metadata.\n      \nIf you are providing your\
            \ own `uri` (see above), then you do not need to provide this.\n\nIf you\
            \ are not providing your own `uri` and you do not provide this, then there\
            \ wills simply be no image.\n\nOnly provide a value for `uri_metadata`\
            \ if the `upload_method` is set to `S3` (see the description for `upload_method`\
            \ above).\n\nLearn more about how to format this metadata <a href=\"https://blockchainapi.com/2022/01/18/how-to-format-off-chain-nft-metadata.html\"\
            \ target=\"_blank\">here</a>."
          type: object
        is_mutable:
          default: true
          description: |
            Indicates whether or not the NFT created is mutable. If mutable, the NFT can be updated later. Once set to immutable, the NFT is unable to be changed.
          type: boolean
        is_master_edition:
          default: true
          description: |
            Whether or not the NFT is a master edition NFT. Saves about 0.001 SOL in transaction costs when set to false.
          type: boolean
        seller_fee_basis_points:
          default: 0
          description: "Valid values from 0 to 10000. Must be an integer. \nRepresents\
            \ the number of basis points that the seller receives as a fee upon sale.\
            \ \nE.g., 100 indicates a 1% seller fee.\nSeller does not receive a fee\
            \ when \"primary_sale_has_happened\" is set to true. \nWill be set to\
            \ false after first sale has occurred.\n"
          type: number
        creators:
          default:
          - The Public Key Corresponding to The Seed Phrase, Path, and Passphrase
            Provided
          description: "A JSON encoded string representing an array / list. \nThe\
            \ designated creators of the NFT.\nLength of the creator list must match\
            \ length of the list of share. \nValid lengths of the list range from\
            \ 1 to 5.\nEach item in the list must be a valid public key address. \
            \  \nOnly the public key corresponding to the seed phrase provided will\
            \ be marked as verified. Any other creators supplied will be marked as\
            \ unverified.\n"
          items:
            type: string
          type: array
        share:
          default:
          - 100
          description: "A JSON encoded string representing an array / list. \nThe\
            \ share of the royalty that each creator gets. Valid values range from\
            \ 0 to 100.\nSum of the values must equal 100. \nOnly integer value accepted.\
            \ Length of the share list must match length of the list of creators.\n"
          items:
            type: number
          type: array
        mint_to_public_key:
          default: The public key of the wallet provided
          description: |
            Assign ownership of the NFT to the public key address given by `mint_to_public_key`
          type: string
        network:
          default: devnet
          description: "This determines which network you choose to run the API calls\
            \ on. We recommend first testing on the devnet, because minting an NFT\
            \ costs a little above 0.01 SOL, which is about $1.60 at the time of this\
            \ writing.  When you run on the mainnet-beta, each successful call will\
            \ deduct approximately that much. When you run on the devnet, that amount\
            \ is deducted from a simulated amount, so you are not paying with real\
            \ SOL. To get SOL on the devnet,\n  airdrop SOL to this address using\
            \ the CLI. Keep in mind that you can only do this every so often. If you\
            \ are rate-limited, consider using a VPN and trying again, or just waiting.\
            \ To get SOL on the mainnet-beta, you \n  must transfer real SOL to this\
            \ account from another wallet (e.g., from another wallet you own, from\
            \ an exchange, etc.). We hope to make this process easier in the future,\
            \ and if you have any suggestions, please add them \n  as an issue on\
            \ our <a href=\"https://github.com/BL0CK-X/the-blockchain-api\" target=\"\
            _blank\">GitHub repository</a> for the API. To get a fee estimate, make\
            \ a GET requests to the <a href=\"#tag/Solana-NFT/paths/~1solana~1nft~1mint~1fee/get\"\
            >v1/solana/nft/mint/fee endpoint</a> (details in sidebar).\n"
          enum:
          - devnet
          - mainnet-beta
          type: string
      type: object
    NFTMintErrorResponse:
      example:
        error: |
          Insufficient balance. You need 12500434 lamports, but you have 20.  If you are running on the devnet, see how to airdrop SOL to your wallet to get started. If you are  running on the mainnet, you will have to transfer real SOL to your wallet from an exchange, another  wallet or some other source. You can check your balance with our endpoint v1/solana/wallet/balance.
      properties:
        error:
          type: string
      title: A response error when minting an NFT
    NFTSearchRequest:
      example:
        name: Elon Musk
        name_search_method: exact_match
        symbol: Elo
        symbol_search_method: begins_with
        network: mainnet-beta
      properties:
        update_authority:
          description: The public key of the update authority of the NFT
          type: string
        update_authority_search_method:
          default: exact_match
          description: Only `exact_match` supported at this time
          enum:
          - exact_match
          type: string
        mint_address:
          description: The mint address of the NFT
          type: string
        mint_address_search_method:
          default: exact_match
          description: Only `exact_match` supported at this time
          enum:
          - exact_match
          type: string
        name:
          description: The name of the NFT
          type: string
        name_search_method:
          default: exact_match
          enum:
          - begins_with
          - exact_match
          type: string
        uri:
          description: The NFT's uri
          type: string
        uri_search_method:
          default: exact_match
          enum:
          - begins_with
          - exact_match
          type: string
        symbol:
          description: The symbol associated with the candy machine
          type: string
        symbol_search_method:
          default: exact_match
          enum:
          - begins_with
          - exact_match
          type: string
        network:
          default: devnet
          enum:
          - devnet
          - mainnet-beta
          type: string
      type: object
    NFTSearchResponse:
      example:
      - nft_metadata:
          data:
            creators:
            - F5Nrvo1Vn3J2uhVKYTxwx6j2vsq4m8wFj15smSmoTnz7
            - 567srSapKFaKmhpCXcQEDjsw9oBTSYLwpJ447ZmaWD4Z
            name: Elon Musk
            seller_fee_basis_points: 500
            share:
            - 0
            - 100
            symbol: ElonVerse
            uri: https://ipfs.io/ipfs/QmYrS4MhTz528ATfeNHXqhf5QnacdAJ2At1dkKZ7ULvYr3
            verified:
            - 1
            - 0
          is_mutable: true
          mint: 7cnQ9K6Xgckd28jMj14memHJhLpPGs7iofBYr4e9iHnS
          primary_sale_happened: true
          update_authority: 567srSapKFaKmhpCXcQEDjsw9oBTSYLwpJ447ZmaWD4Z
        pub_key_hash: GGrF8NjbSKWJHsbhBJLSdG35K9wfaWqZe1mQaPKQmuH9
      - nft_metadata:
          data:
            creators:
            - Cx1ngaJkFsRJQNDRtQJzLtyr56JHXr3Z3QHnP1qVdwhz
            - 567srSapKFaKmhpCXcQEDjsw9oBTSYLwpJ447ZmaWD4Z
            name: Elon Musk
            seller_fee_basis_points: 500
            share:
            - 0
            - 100
            symbol: ElonVerse
            uri: https://ipfs.io/ipfs/QmYrS4MhTz528ATfeNHXqhf5QnacdAJ2At1dkKZ7ULvYr3
            verified:
            - 1
            - 0
            is_mutable: true
            mint: Et7fwzBWVTP9wrN53N1GcToyTJR2kUQFjKvC4VzEXWzF
            primary_sale_happened: true
            update_authority: 567srSapKFaKmhpCXcQEDjsw9oBTSYLwpJ447ZmaWD4Z
        pub_key_hash: 14nn1oBHHB6oRNHMgLQdu7SFd3wqFW3NA7W3eGYQWMSt
      - nft_metadata:
          data:
            creators:
            - ETBTMwqTp2oWfdr7krxdtKM8cfGiL4d3yVz24sZvwGpR
            - 567srSapKFaKmhpCXcQEDjsw9oBTSYLwpJ447ZmaWD4Z
            name: Elon Musk
            seller_fee_basis_points: 500
            share:
            - 0
            - 100
            symbol: ElonVerse
            uri: https://ipfs.io/ipfs/QmYrS4MhTz528ATfeNHXqhf5QnacdAJ2At1dkKZ7ULvYr3
            verified:
            - 1
            - 0
            is_mutable: true
            mint: EehtKnwXy4hyB6vGBTAwnqvE3tNwQtiQPw1ebki3mR7R
            primary_sale_happened: true
            update_authority: 567srSapKFaKmhpCXcQEDjsw9oBTSYLwpJ447ZmaWD4Z
        pub_key_hash: cko2u862bb9JCp7MSgKhSToHgSXEUmr8MtHpnzpZ1UR
      properties:
        nft_metadata:
          $ref: '#/components/schemas/NFT'
        pub_key_hash:
          description: Use this to verify the NFT
          type: string
      type: object
    NFTOwnerResponse:
      example:
        nft_owner: 31LKs39pjT5oj6fWjC3F76dHWf9489asCthmgj8wu7pj
      properties:
        nft_owner:
          description: The public key address of the wallet that has ownership over
            the provided NFT
          type: string
      required:
      - nft_owner
      type: object
    NFTOwnerAdvancedResponse:
      example:
        contract:
          contract_blockchain_identifier: M2mx93ekt1fmXSVkTrUL9xVFHkmME8HTUi5Cyc5aF7K
          contract_id: magic-eden-v2
          contract_name: Magic Eden v2
          contract_type: marketplace
        owner: 25UJMR3FiMM6noQtPEaCJ6eDU2YQ7myDhikVQXmMuSRW
        price: 50000000
        state: listing
      properties:
        contract:
          $ref: '#/components/schemas/NFTOwnerAdvancedResponse_contract'
        owner:
          description: |
            The public key of the wallet that has true ownership over the provided NFT. If listed, it is the lister. If placed on a loan, it is the loanee. If staked, it is the staker. If burned, it is the burner. Etc. Returns `null` in the edge case that we were unable to find the true owner. If this happens, please report it to us and we will try to adapt for this edge case.
          type: string
        price:
          description: The price of the NFT, if listed or loaned. If held, staked,
            or burned, this is null.
          type: number
        state:
          description: The state of the NFT
          enum:
          - loaning
          - listing
          - staking
          - holding
          - burned
          type: string
      type: object
    NFTMintFee:
      example:
        description: "We calculated the fee as follows: 10000000 + 1461600 + 534600\
          \ = 11996200 lamports = 0.0119962 SOL.  The largest portion of the fee (10000000\
          \ lamports) goes to the Metaplex protocol. They list their  fees on their\
          \ front page <a href=\"https://metaplex.com/\">here</a>. The rent fee (1461600\
          \ lamports) is the lifetime  fee needed to store the NFT on the blockchain.\
          \ This is paid to the validators of the network. You can see  how the rent\
          \ fees work <a href=\"https://docs.solana.com/implemented-proposals/rent\"\
          \ target=\"_blank\">here</a>. The transaction fee  (534600 lamports) is\
          \ what is paid to the validators for processing the three transactions that\
          \ compose  the minting of an NFT: creating an account, initializing the\
          \ mint, creating the metadata, and updating  the metadata. \n"
        fee: 11996200
      properties:
        nft_mint_fee_estimate_lamports:
          description: The estimate of the total fee for minting an NFT on Solana
          type: number
        description:
          description: A description of the fee that explains how it was estimated
          type: string
      title: The response when getting an estimated fee for minting a Solana NFT
    GetCandyMachineIDRequest:
      example:
        mint_address: AFPX7VQcezoxJsLWeA6zVTHLGtrjrY5SqgtmjD8jxvgx
        network: mainnet-beta
      properties:
        mint_address:
          description: The address of the NFT. NOT the mint authority address
          type: string
        network:
          default: devnet
          enum:
          - devnet
          - mainnet-beta
          type: string
      required:
      - mint_address
      type: object
    GetCandyMachineIDResponse:
      example:
        candy_machine_id: FmkrvXRenCGtwBHw3VtBcExp8eTdnau97upaewF4GUEX
        candy_machine_contract_version: v1
      properties:
        candy_machine_id:
          description: The ID of the candy machine that minted the NFT
          type: string
        candy_machine_contract_version:
          description: Whether or not this corresponds to candy machine v1, candy
            machine v2, or a Magic Eden candy machine.
          enum:
          - v1
          - v2
          - magic-eden-v1
          type: string
      type: object
    CandyMachineSearchRequest:
      example:
        nft_name: Elon
        nft_name_index: 44
        nft_name_search_method: begins_with
        network: mainnet-beta
      properties:
        update_authority:
          description: The public key of the update authority of the candy machine
          type: string
        update_authority_search_method:
          default: exact_match
          description: Only `exact_match` supported at this time
          enum:
          - exact_match
          type: string
        config_address:
          description: The public key of the configuration of the candy machine
          type: string
        config_address_search_method:
          default: exact_match
          description: Only `exact_match` supported at this time
          enum:
          - exact_match
          type: string
        uuid:
          description: |
            The alphanumeric string of length six that corresponds to the candy machine. This is NOT the candy machine ID.  This is the first six letters of the configuration address and is also used to identify the candy machine. An example is `4zKV6i`.
          type: string
        uuid_search_method:
          default: exact_match
          description: Only `exact_match` supported at this time
          enum:
          - exact_match
          type: string
        symbol:
          description: The symbol associated with the candy machine
          type: string
        symbol_search_method:
          default: exact_match
          enum:
          - begins_with
          - exact_match
          type: string
        nft_name:
          description: |
            The name of an NFT on the candy machine, minted or unminted. For example, to find The Solana Money Boys candy machine, you already know that each NFT is named "Solana Money Boy #0", "Solana Money Boy #1", and so on. So you could search with  nft_name="Solana Money Boy #0", nft_name_index=0, nft_name_search_method='exact_match', for example, which would return the candy machine ID. This also works with candy machines that are not live but are uploaded.
          type: string
        nft_name_index:
          default: "0"
          description: |
            The index of the NFT to check, e.g., the 2nd NFT would have an index of 1. We cannot search all NFTs on a candy machine currently, so you must search an NFT at a particular position, such as the first, second, and so on. In general, nft_name_index=0 works for most use cases.
          type: string
        nft_name_search_method:
          default: exact_match
          enum:
          - begins_with
          - exact_match
          type: string
        network:
          default: devnet
          enum:
          - devnet
          - mainnet-beta
          type: string
        candy_machine_contract_version:
          default: v1
          description: "The candy machine contract you want to search. \nIf you want\
            \ to search `v1` candy machines, set this to `v1`. If you want to search\
            \ `v2` candy machines. set this to `v2`.\n"
          enum:
          - v1
          - v2
          type: string
      type: object
    GetAllNFTsResponse:
      example:
        minted_nfts:
        - nft_metadata:
            data:
              creators:
              - FmkrvXRenCGtwBHw3VtBcExp8eTdnau97upaewF4GUEX
              - 5hybnoWHp7ruUizgKoxSviJrGfgBLLxzybZosQoHhK6C
              name: 'God Particle #0078'
              seller_fee_basis_points: 500
              share:
              - 0
              - 100
              symbol': GP
              uri: https://arweave.net/GIVhsoTr7Phcs4AZxqkVZZ-MToupqK-NRYLVw9yTdLk
              verified:
              - 1
              - 0
            is_mutable: true
            mint: TqQvdc5USoG5snWk75YiwDTPTLJe8U1BR7pSbhDRmUS
            primary_sale_happened: true
            update_authority: 5hybnoWHp7ruUizgKoxSviJrGfgBLLxzybZosQoHhK6C
          pub_key_hash: G7EBE41G3yv2JJJGPzw6HQr6hqzaNtythGJD4Af97fec
        unminted_nfts:
        - name: 'God Particle #3123'
          uri: https://arweave.net/vNw7FWhtkgbNr7uPh9tgjIfH7ueN9EXV7X_qxdUn1dM
        all_nfts:
        - name: 'God Particle #3123'
          uri: https://arweave.net/vNw7FWhtkgbNr7uPh9tgjIfH7ueN9EXV7X_qxdUn1dM
      properties:
        minted_nfts:
          description: The minted NFTs. Only filled in for `v1` candy machines. Left
            empty for `v2`.
          items:
            $ref: '#/components/schemas/GetAllNFTsResponse_minted_nfts'
          type: array
        unminted_nfts:
          description: The unminted NFTs. Only filled in for `v1` candy machines.
            Left empty for `v2`.
          items:
            $ref: '#/components/schemas/GetAllNFTsResponse_unminted_nfts'
          type: array
        all_nfts:
          description: The list of all NFTs. Filled in for both `v1` and `v2` NFTs.
          items:
            $ref: '#/components/schemas/GetAllNFTsResponse_unminted_nfts'
          type: array
        accurate:
          description: "Whether or not the division of NFTs among minted and unminted\
            \ is accurate. If it is not accurate, then it is possible that NFTs have\
            \ been included in the `minted` list that are not actually minted. If\
            \ it is accurate, then the split of  minted and unminted is correct. `v1`\
            \ candy machines always return a correct minted/unminted split. \n"
          type: boolean
      type: object
    GetCandyMetadataRequest:
      example:
        candy_machine_id: FmkrvXRenCGtwBHw3VtBcExp8eTdnau97upaewF4GUEX
        network: mainnet-beta
        candy_machine_contract_version: v1
      properties:
        candy_machine_id:
          description: |
            The ID of the candy machine. This is the same as `config_address` for `v2` candy machines (supply either).
          type: string
        config_address:
          description: |
            The configuration address of the candy machine. This is the same as `candy_machine_id` for `v2` candy machines (supply either).
          type: string
        uuid:
          description: |
            The uuid of the candy machine. This is an alphanumeric string of length six (e.g., HpVdfP), which corresponds to the first six characters of the config_address.
          type: string
        network:
          default: devnet
          enum:
          - devnet
          - mainnet-beta
          type: string
        candy_machine_contract_version:
          default: v1
          description: |
            The candy machine contract of the candy machine for which you are retrieving the metadata.
            If you are providing `v1` candy machine ID, set this to `v1`. If you are providing `v2` candy machine ID, set this to `v2`. If you don't know which version your candy machine is, check out <a href="#operation/solanaGetAccountIsCandyMachine">this endpoint</a>.
          enum:
          - v1
          - v2
          type: string
      type: object
    GetCandyMetadataResponse:
      example:
        authority: 5hybnoWHp7ruUizgKoxSviJrGfgBLLxzybZosQoHhK6C
        bump: 255
        creators:
        - address: 5hybnoWHp7ruUizgKoxSviJrGfgBLLxzybZosQoHhK6C
          share: 100
        candy_machine_id: 8BG7YY2tHagJz6xdYmXwHUNxaUKSzQyafr4Nsa2PmyeT
        config_address: HpVdfPyqfTzVLprw9UdVH94QJeTB3HEdD1bFwxR46my6
        go_live_date: 4481031600
        is_mutable: true
        items_available: 3125
        items_redeemed: 125
        max_number_of_lines: 3125
        max_supply: 0
        price: 250000000
        retain_authority: true
        seller_fee_basis_points: 500
        symbol: GP
        token_mint: null
        uuid: HpVdfP
        wallet: 5hybnoWHp7ruUizgKoxSviJrGfgBLLxzybZosQoHhK6C
      properties:
        authority:
          description: The update authority of the candy machine
          type: string
        bump:
          type: number
        candy_machine_id:
          description: |
            The ID of the candy machine
          type: string
        config_address:
          description: |
            The configuration public key address of the candy machine
          type: string
        creators:
          items:
            $ref: '#/components/schemas/GetCandyMetadataResponse_creators'
          type: array
        go_live_date:
          description: |
            The unix timestamp of the start date of the candy machine
          type: number
        is_mutable:
          type: boolean
        items_available:
          description: |
            The number of NFTs available for mint from the candy machine
          type: number
        items_redeemed:
          description: |
            The number of NFTs minted already from the candy machine
          type: number
        max_number_of_lines:
          type: number
        max_supply:
          type: number
        price:
          description: |
            The price in Lamports for minting an NFT from the candy machine. 1e9 Lamport  = 1 SOL
          type: number
        retain_authority:
          type: boolean
        seller_fee_basis_points:
          description: |
            The royalty the creators receive on each sale after the primary sale (the initial minting) (denominated in basis points (e.g., 75 basis points = 0.75%))
          type: number
        symbol:
          type: string
        token_mint:
          type: string
        uuid:
          description: The uuid of the candy machine
          type: string
        wallet:
          description: |
            The public key address of the wallet that recevies the proceeds from NFT mints
          type: string
      type: object
    GetCandyMetadataErrorResponse:
      example:
        error: "Unknown error. Possible issues: \n  - You gave an invalid candy machine\
          \ ID.\n  - You used the wrong network.\n"
      properties:
        error:
          type: string
    CCProjectCreateRequest:
      description: |
        You can change any of these parameters after creating the project. None of these parameters are required.
      example:
        customer_id_to_collect:
          description: You must enter the email associated with your BlockchainAPI
            account in order to for your payment to be properly processed.
          id_type: email
          name: Email
          required: true
        description: We make coding with blockchains easy with a simple API.
        discord_webhook: https://discord.com/api/webhooks/147825713467889122/RflXcTfqnScxmnGXvwbgBoMTw96I_41-dpc8nSsdvlMGgVAlvXNokP2-KfcXZwLwqXVw
        logo_url: https://dashboard.blockchainapi.com/favicon.ico
        name: The Blockchain API
        payout_method:
          blockchain_identifier: APipLFSda8yjUaSMk69m8yA1KT6RE5MR1Ltso4ciirzW
        success_url: https://dashboard.blockchainapi.com/#billing
        uid: YqCnvufBkZRzjNQj7YlZLP9ByHJ3
        webhook: https://api.blockchainapi.com/webhook/crypto
        website: https://blockchainapi.com/
      properties:
        name:
          description: |
            The name of the project. This is shown to your users and should identify your company or organization.
          type: string
        description:
          description: |
            The description of your project / company.
          type: string
        webhook:
          description: |
            A URL that identifies where we should make an API request to notify you of a new payment (e.g., api.myproject.com/crypto_payments/webhook). Learn more [here](#tag/CC-Webhook/operation/getCCWebhook).
          type: string
        website:
          description: |
            The website of your project / company.
          type: string
        discord_webhook:
          description: |
            A Discord webhook. We will send a message to this channel to notify of payment. Learn more [here]().
          type: string
        logo_url:
          description: |
            A URL of your logo.
          type: string
        customer_id_to_collect:
          $ref: '#/components/schemas/CCProjectCreateRequest_customer_id_to_collect'
        success_url:
          description: |
            Where to redirect customers after payment. If not supplied, customers will be redirected to checkout.blockchainapi.com/me to view their subscriptions.
          type: string
        payout_method:
          $ref: '#/components/schemas/CCProjectCreateRequest_payout_method'
      required:
      - name
      type: object
    CCProject:
      description: |
        You can change any of these parameters after creating the project. None of these parameters are required.
      example:
        customer_id_to_collect:
          description: You must enter the email associated with your BlockchainAPI
            account in order to for your payment to be properly processed.
          id_type: email
          name: Email
          required: true
        description: We make coding with blockchains easy with a simple API.
        discord_webhook: https://discord.com/api/webhooks/147825713467889122/RflXcTfqnScxmnGXvwbgBoMTw96I_41-dpc8nSsdvlMGgVAlvXNokP2-KfcXZwLwqXVw
        logo_url: https://dashboard.blockchainapi.com/favicon.ico
        name: The Blockchain API
        payout_method:
          blockchain_identifier: APipLFSda8yjUaSMk69m8yA1KT6RE5MR1Ltso4ciirzW
        project_id: project_3ePEqqiRJXr8RZ2zIjwi
        success_url: https://dashboard.blockchainapi.com/#billing
        uid: YqCnvufBkZRzjNQj7YlZLP9ByHJ3
        webhook: https://api.blockchainapi.com/webhook/crypto
        website: https://blockchainapi.com/
      properties:
        project_id:
          description: |
            The ID of the project. This is auto-generated upon project creation and cannot currently be changed.
          type: string
        name:
          description: |
            The name of the project. This is shown to your users and should identify your company or organization.
          type: string
        description:
          description: |
            The description of your project / company.
          type: string
        webhook:
          description: |
            A URL that identifies where we should make an API request to notify you of a new payment (e.g., api.myproject.com/crypto_payments/webhook). Learn more [here](#tag/CC-Webhook/operation/getCCWebhook).
          type: string
        website:
          description: |
            The website of your project / company.
          type: string
        discord_webhook:
          description: |
            A Discord webhook. We will send a message to this channel to notify of payment. Learn more [here]().
          type: string
        logo_url:
          description: |
            A URL of your logo.
          type: string
        customer_id_to_collect:
          $ref: '#/components/schemas/CCProjectCreateRequest_customer_id_to_collect'
        success_url:
          description: |
            Where to redirect customers after payment. If not supplied, customers will be redirected to checkout.blockchainapi.com/me to view their subscriptions.
          type: string
        payout_method:
          $ref: '#/components/schemas/CCProjectCreateRequest_payout_method'
      required:
      - name
      - project_id
      type: object
    CCPayment:
      example:
        project_id: project_xpZ3NwHmqUvwmTzjpqgO
        product_id: product_L4zD4ZXlNM3Z2Qt
        plan_id: plan_htuCevhEjKNip3u
        payment_id: payment_97jA1szpVjrSI5EvOb5zxNQFq5CfrC
        blockchain_identifier: 31LKs29pjT5oj6fxjC3F76dHWf9489asCthmgj8wu7pj
        blockchain_payment_details:
          chain: solana
          fee_amount: "900"
          payout_amount: "89100"
          token_blockchain_identifier: EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v
          total_paid: "90000"
          transaction_signature: 2DNiQrMh4vRj39PWUdB8aXtybkKoSaCzzfwJSo4wmxoFNQ3CrvGJp9v58ScrG5hyth7LqNssScZX3PMFSy9QA5cu
        customer_id: customeremail@gmail.com
        payment_validation_code: jtTp8vX79l0MWK2zp9JuHDEn4tUCwR
        period_end: 1653538683
        period_start: 1650946683
        transaction_blockchain_identifier: 2DNiQrMh4vRj39PWUdB8aXtybkKoSaCzzfwJSo4wmxoFNQ3CrvGJp9v58ScrG5hyth7LqNssScZX3PMFSy9QA5cu
      properties:
        project_id:
          description: |
            The ID of the project
          type: string
        product_id:
          description: |
            The ID of the associated product
          type: string
        plan_id:
          description: |
            The ID of the respective plan
          type: string
        payment_id:
          description: |
            The unique ID of the payment
          type: string
        blockchain_identifier:
          description: |
            The unique identifier of the wallet from which the payment was made.
          type: string
        blockchain_payment_details:
          $ref: '#/components/schemas/CCPayment_blockchain_payment_details'
        customer_id:
          description: |
            The ID of the customer
          type: string
        payment_validation_code:
          description: |
            The validation code shown to the customer. This is only visible to the customer who paid. They can use this code to redeem their subscription to their product.
          type: string
        period_end:
          description: |
            A UNIX time stamp, in seconds, that identifies the end of the period of the subscription
          type: number
        period_start:
          description: |
            A UNIX time stamp, in seconds, that identifies the start of the period of the subscription
          type: number
        transaction_blockchain_identifier:
          description: |
            The string that uniquely identifies the blockchain transaction
          type: string
      type: object
    CCWebhook:
      example:
        time_sent: 1651018365
        data:
          project_id: project_xpZ3NwHmqUvwmTzjpqgO
          product_id: product_L4zD4ZXlNM3Z2Qt
          plan_id: plan_htuCevhEjKNip3u
          payment_id: payment_97jA1szpVjrSI5EvOb5zxNQFq5CfrC
          blockchain_identifier: 31LKs29pjT5oj6fxjC3F76dHWf9489asCthmgj8wu7pj
          blockchain_payment_details:
            chain: solana
            fee_amount: "900"
            payout_amount: "89100"
            token_blockchain_identifier: EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v
            total_paid: "90000"
            transaction_signature: 2DNiQrMh4vRj39PWUdB8aXtybkKoSaCzzfwJSo4wmxoFNQ3CrvGJp9v58ScrG5hyth7LqNssScZX3PMFSy9QA5cu
          customer_id: customeremail@gmail.com
          payment_validation_code: jtTp8vX79l0MWK2zp9JuHDEn4tUCwR
          period_end: 1653538683
          period_start: 1650946683
          transaction_blockchain_identifier: 2DNiQrMh4vRj39PWUdB8aXtybkKoSaCzzfwJSo4wmxoFNQ3CrvGJp9v58ScrG5hyth7LqNssScZX3PMFSy9QA5cu
        webhook_id: webhook/payment.received/payment_2nFvUIGAsczBHSgiIz5JMenEiiJZet
        signature:
        - 68
        - 112
      properties:
        webhook_id:
          description: |
            The unique identifier of the webhook
          example: webhook/payment.received/payment_2nFvUIGAsczBHSgiIz5JMenEiiJZet
          type: string
        signature:
          description: |
            A signature from the Blockchain API that verifies the webhook is from us. An array of integers.
          example:
          - 68
          - 112
          type: object
        time_sent:
          description: |
            The time we sent the webhook
          example: 1651018365
          type: number
        data:
          $ref: '#/components/schemas/CCPayment'
      type: object
    CCWebhookValidateRequest:
      example:
        time_sent: 1651018365
        webhook_id: webhook/payment.received/payment_2nFvUIGAsczBHSgiIz5JMenEiiJZet
        webhook_signature:
        - 68
        - 112
      properties:
        webhook_id:
          description: |
            The unique identifier of the webhook.
          example: webhook/payment.received/payment_2nFvUIGAsczBHSgiIz5JMenEiiJZet
          type: string
        webhook_signature:
          description: |
            The signature we inluded in the webhook. The signature is from the Blockchain API and it ensures that the webhook is from us and not a malicioius actor.
          example:
          - 68
          - 112
          type: object
        time_sent:
          description: |
            The time the webhook was sent.
          example: 1651018365
          type: number
      required:
      - time_sent
      - webhook_id
      - webhook_signature
      type: object
    Account_context:
      properties:
        slot:
          type: number
      type: object
    Account_value:
      properties:
        data:
          description: More info about the account. What are included depends on the
            type of account. See examples.
          type: object
        executable:
          description: Whether or not this account is marked as executable
          type: boolean
        owner:
          description: The owner of the account
          type: string
        rent_epoch:
          type: number
      type: object
    Transaction_result:
      properties:
        block_time:
          type: number
        meta:
          type: object
        slot:
          type: number
        transaction:
          type: object
      type: object
    NFT_data:
      properties:
        creators:
          description: |
            The creators of the NFT
          items:
            description: The public key address of each creator
            type: string
          type: array
        name:
          description: |
            The name of the NFT
          type: string
        share:
          description: |
            The portion of the seller fee that each creator receives. Index 0 corresponds to creator at index 0 in the creator array, and so on. Length of share array must be the same as the length of the creator array.
          items:
            description: The share of the seller fee
            format: float
            type: number
          type: array
        symbol:
          description: |
            The symbol of the NFT
          type: string
        uri:
          description: |
            The URI of the NFT
          type: string
        verified:
          description: |
            Whether or not the respective creator has signed the minting transaction of the NFT. Index 0 corresponds to creator at index 0 in the creator array, and so on. Length of verified array must be the same as the length of the creator array.
          items:
            description: The share of the seller fee
            maximum: 1
            minimum: 0
            type: number
          type: array
      type: object
    NFT_collection:
      properties:
        verified:
          description: |
            A `0` or `1` indicating whether or not the associated collection is verified.
          type: number
        key:
          description: |
            Will return `11111111111111111111111111111111` if no associated `collection_id`.
            Otherwise it will return the `collection_id`, which is a public key representing the verified Metaplex collection. See more [here](https://collections.metaplex.com).
          type: string
      type: object
    NFTOwnerAdvancedResponse_contract:
      description: |
        The contract the NFT interacted with most recently. If there is none, this is null.
      properties:
        contract_type:
          description: The type of the contract that it last interacted with
          enum:
          - marketplace
          - otc
          - loan
          - staking
          - burned
          type: string
        contract_id:
          description: The string identifier (not the public key) that we denote the
            contract with.
          type: string
        contract_blockchain_identifier:
          description: The public key of the contract
          type: string
        contract_name:
          description: The readable name of the contract (e.g., Magic Eden)
          type: string
      type: object
    GetAllNFTsResponse_minted_nfts:
      properties:
        nft_metadata:
          $ref: '#/components/schemas/NFT'
        pub_key_hash:
          description: Use this to verify the NFT
          type: string
      type: object
    GetAllNFTsResponse_unminted_nfts:
      properties:
        name:
          description: The name of the unminted NFT
          type: string
        uri:
          description: The uri of the unminted NFT
          type: string
      type: object
    GetCandyMetadataResponse_creators:
      properties:
        address:
          description: The public key of a creator
          type: string
        share:
          description: The share of the royalty that each creator receives
          type: number
      type: object
    CCProjectCreateRequest_customer_id_to_collect:
      description: |
        The customer ID to collect during checkout. This could be a Twitter handle, a Telegram handle -- anything you use to identify your customers. We will collect it before they pay and link the payment to this ID.
        If you do not provide this, we will only be able to link the payment through either the customer's payment validation code, or their wallet's public key. If the users are signing in with their wallet in your application, then you can simply check whether they have paid through that.
      properties:
        id_type:
          description: "What type of identifier you are collecting, either an \"email\"\
            \ or \"misc\"ellanous. Miscellanous simply means you are collecting something\
            \ other than an email. \n"
          enum:
          - misc
          - email
          type: string
        name:
          description: |
            The name of the customer ID input presented to the user
          type: string
        description:
          default: ""
          description: |
            The description / stated purpose of the customer ID input presented to the user
          type: string
        required:
          default: false
          description: |
            Whether to require the customer ID
          type: boolean
      required:
      - id_type
      - name
      type: object
    CCProjectCreateRequest_payout_method:
      description: |
        The method by which we pay out earnings to you. Currently, we only support paying out directly to your Solana wallet. In the future, we will support other wallets and support bank payouts.
      properties:
        blockchain_identifier:
          description: "The identifier of the wallet that will receive the payments.\
            \ On Solana, this is your wallet's public key. \n"
          type: string
      required:
      - blockchain_identifier
      type: object
    CCPayment_blockchain_payment_details:
      description: "The information necessary to verify the payment. \n"
      properties:
        chain:
          description: |
            The chain on which the payment was made.
          enum:
          - solana
          type: string
        fee_amount:
          description: |
            The fee taken by the blockchain API. This is shown in integer form.
          type: string
        payout_amount:
          description: |
            The amount paid to the project's payout wallet (the recipient of the payment). This is shown in integer form.
          type: string
        token_blockchain_identifier:
          description: |
            The blockchain identifier of the token used to pay. Currently, we only support payments in USDC.
          type: string
        total_paid:
          description: |
            The total paid by the user when making the payment. This should match the amount set in the respective plan.
          type: string
        transaction_signature:
          description: |
            The transaction signature which you can use to manually or automatically verify the transaction on the blockchain.
          type: string
      type: object
  securitySchemes:
    APIKeyID:
      description: Get a free API key pair <a target="_blank" href="https://dashboard.blockchainapi.com/api-keys">here</a>.
      in: header
      name: APIKeyID
      type: apiKey
    APISecretKey:
      description: Get a free API key pair <a target="_blank" href="https://dashboard.blockchainapi.com/api-keys">here</a>.
      in: header
      name: APISecretKey
      type: apiKey
x-tagGroups:
- name: Cross-chain
  tags:
  - Wallet
  - Transaction
  - Name Service
  - Token
- name: Solana
  tags:
  - Solana Wallet
  - Solana NFT
  - Solana NFT Marketplaces
  - Solana Candy Machine
  - Solana Transaction
  - Solana Account
  - Solana SPL Token
- name: CryptoCheckout
  tags:
  - CC Project
  - CC Product
  - CC Plan
  - CC Payment
  - CC Webhook
